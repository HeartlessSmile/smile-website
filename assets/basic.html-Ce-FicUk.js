import{_ as i,c as l,a,o as s}from"./app-DzEwyuga.js";const t="/smile-website/images/deploy_basic.png",p="/smile-website/images/deploy_basic_one.png",n="/smile-website/images/deploy_basic_two.png",c={};function o(r,e){return s(),l("div",null,e[0]||(e[0]=[a('<h1 id="传统部署" tabindex="-1"><a class="header-anchor" href="#传统部署"><span>传统部署</span></a></h1><p>在前后端分离的开发模式中，前端完整的一套部署方案通常是通过webpack等构建工具进行打包，生成最终浏览器可直接运行的静态资源。将该静态资源放置在服务器某个位置，nginx配置反向代理指向该静态资源。</p><p><img src="'+t+'" alt="基础示意图"></p><h2 id="手动版" tabindex="-1"><a class="header-anchor" href="#手动版"><span>手动版</span></a></h2><p><img src="'+p+'" alt="操作步骤"> 当我们按照上述逻辑部署的时候，可以总结为以下几步：</p><ol><li>本地构建打包</li><li>通过sftp工具上传到服务器</li><li>配置nginx反向代理</li></ol><p>这样部署久了，我们就会发现几个问题，</p><ul><li>不同的开发人员本地构建的代码有差别</li><li>每次都得手动sftp上传代码，很繁琐</li></ul><p>为了解决这几个问题，衍生出了一个新的方案</p><h2 id="进化版" tabindex="-1"><a class="header-anchor" href="#进化版"><span>进化版</span></a></h2><p>进化版的步骤稍作调整：</p><ol><li>本地开发完毕后push代码到仓库</li><li>服务器从仓库拉代码</li><li>服务器构建打包</li><li>配置nginx反向代理 <img src="'+n+'" alt="操作步骤"></li></ol><div class="hint-container tip"><p class="hint-container-title">提示</p><p>可以将服务器的操作写入一个shell脚本中，每次登录后直接执行脚本，可减少大量重复性工作</p></div><p>在这个方案版本中，我们将大量的工作放置在服务器中完成，有效避免了本地开发环境差异带来的问题。但所有的操作还是得一行一行命令去敲，项目真正的部署也还是需要手动去操作服务器。</p><p>在部署的服务器可能还运行着多个应用程序，这些应用程序之间可能存在版本冲突或其他的问题，导致应用程序的不稳定性和不可靠性。</p><p>如果需要部署多台服务器还需要管理员手动进行软件的安装、配置、更新和维护，比较繁琐、费时和容易出错。</p><p>那有没有再更进一步的方案，可以解决这些问题呢？那就需要来介绍容器化部署的方案了。</p>',17)]))}const m=i(c,[["render",o],["__file","basic.html.vue"]]),g=JSON.parse('{"path":"/project/deploy/basic.html","title":"传统部署","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"手动版","slug":"手动版","link":"#手动版","children":[]},{"level":2,"title":"进化版","slug":"进化版","link":"#进化版","children":[]}],"git":{"updatedTime":1733483676000,"contributors":[{"name":"gang.peng","username":"gang.peng","email":"gang.peng@szyh.com","commits":1,"url":"https://github.com/gang.peng"}]},"filePathRelative":"project/deploy/basic.md"}');export{m as comp,g as data};
