import{_ as s,c as a,a as t,o as e}from"./app-DzEwyuga.js";const p={};function c(l,n){return e(),a("div",null,n[0]||(n[0]=[t(`<h1 id="单元测试" tabindex="-1"><a class="header-anchor" href="#单元测试"><span>单元测试</span></a></h1><p>前端单元测试是指对前端代码中的每一个模块（函数、组件等）进行测试的过程。前端单元测试可以通过自动化测试工具（如<code>Jest</code>、<code>Mocha</code>、<code>Karma</code>等）来完成。其中，<code>Jest</code>是<code>Facebook</code>开源的单元测试框架，具有快速、易于学习和使用等特点，已成为前端测试的重要工具之一。</p><p>前端单元测试可以检测代码中每个模块的正确性和健壮性，可以确保代码在修改后不会影响到原有的功能实现，也有助于开发者找出程序中的错误、漏洞和缺陷。单元测试还可以促进代码重构，并提高代码的可读性和可维护性，同时也可以减少代码中的冗余和无用代码。</p><p>单元测试的质量好坏可以通过代码覆盖率来判断，而代码覆盖率由四部分组成：</p><ul><li><strong>语句覆盖率（Statement Coverage）</strong> 用于衡量被测试代码中每条语句的执行覆盖情况</li><li><strong>行覆盖率（Line Coverage）</strong> 用于衡量被测试代码中每行代码的执行覆盖情况，不包含空行和注释等</li><li><strong>函数覆盖率（Function Coverage）</strong> 用于衡量被测试代码中每个声明函数的执行覆盖情况</li><li><strong>分支覆盖率（Branch Coverage）</strong> 用于衡量被测试代码中每一个判定分支的执行覆盖率</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>语句覆盖率和行覆盖率在定义上十分接近，很多资料都会将其画等号。在实际开发中，如果一行代码中只有一条可执行语句，此时语句覆盖率等同于行覆盖率。如果一行代码中有多条可执行语句，并且有存在执行语句执行不到的情况下，语句覆盖率和行覆盖率就不相同。</p></div><h2 id="为什么需要单元测试" tabindex="-1"><a class="header-anchor" href="#为什么需要单元测试"><span>为什么需要单元测试</span></a></h2><p>很多人会说，“前端需求变化这么快，单元测试没法做”。这句话有一定的道理，针对快速迭代的项目而言，业务逻辑一般会跟着项目迭代和更新随时变化，针对业务逻辑写单元测试的意义不大。但正因为项目快速迭代，所以对于公共组件和公共函数的要求更高，更需要去做单元测试来提高它们的可靠性和稳定性。</p><p>再次，当项目重构的时候，单元测试能有效保证代码重构前后逻辑的一致性，大大减少在测试环节中投入的精力。</p><p>开源社区的知名项目基本都有完善的单元测试，可以增强开发人员在工作中的可靠性和稳定性。代码覆盖率不仅代表了当前项目的质量，也一定程度上反应了维护者对他的精力和重视程度。</p><h2 id="有单元测试代码质量就有保证吗" tabindex="-1"><a class="header-anchor" href="#有单元测试代码质量就有保证吗"><span>有单元测试代码质量就有保证吗</span></a></h2><p>不是的，单元测试的代码覆盖率可以作为衡量项目质量的指标之一，但不是全部。因为代码覆盖率 100%只能保证代码的每个语句、分支都被运行过了，不能确保所有执行结果都符合预期。以下面的代码为例，add 是将两个数相加的函数，返回的结果是两个入参的和。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// add.js</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// add.test.js</span></span>
<span class="line"><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;add&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">.</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 Jest 执行以上代码，输出的测试报告中的语句覆盖率、行覆盖率、函数覆盖率及分支覆盖率均为 100%。按照预期，执行以下函数，应该输出 true。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span> <span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0.1</span>，<span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0.3</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>实际上，由于Javascript浮点数运算的精度原因，输出结果为false。代码覆盖率只能证明代码被测试过，不能证明代码的逻辑一定正确。除了代码覆盖率应尽量达到100%，单元测试还应该设计不同场景下的测试用例来尽量覆盖边界情况。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><p>通过前端单元测试，可以检测前端代码中的错误和缺陷，并确保代码的正确性和可靠性。同时，单元测试也帮助开发者更好地理解应用程序，并了解代码中的逻辑，从而更高效地开发和维护应用程序。但作为开发人员，我们不能过于相信单元测试的代码覆盖率，应该以辩证的眼光去看待。</p>`,18)]))}const i=s(p,[["render",c],["__file","unit.html.vue"]]),u=JSON.parse('{"path":"/project/test/unit.html","title":"单元测试","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"为什么需要单元测试","slug":"为什么需要单元测试","link":"#为什么需要单元测试","children":[]},{"level":2,"title":"有单元测试代码质量就有保证吗","slug":"有单元测试代码质量就有保证吗","link":"#有单元测试代码质量就有保证吗","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"git":{"updatedTime":1733483676000,"contributors":[{"name":"gang.peng","username":"gang.peng","email":"gang.peng@szyh.com","commits":1,"url":"https://github.com/gang.peng"}]},"filePathRelative":"project/test/unit.md"}');export{i as comp,u as data};
