import{_ as a,c as s,a as e,o as i}from"./app-DzEwyuga.js";const p="/smile-website/images/hybrid/WebApp.png",t="/smile-website/images/hybrid/jsbridge.png",l="/smile-website/images/hybrid/electron.jpeg",o={};function c(r,n){return i(),s("div",null,n[0]||(n[0]=[e('<h1 id="web渲染" tabindex="-1"><a class="header-anchor" href="#web渲染"><span>Web渲染</span></a></h1><p>基于 Web 渲染的混合开发 App 是一种基于 Web 技术（HTML、CSS、JavaScript）开发的移动应用，同时使用原生容器提供的 Web 视图组件来渲染 UI。它是一种混合模式的开发方式，通过在原生容器中嵌入 Web 视图来实现跨平台开发，既可以使用 Web 技术进行开发，又可以调用原生 API 来实现更加丰富的功能和更好的用户体验。</p><p>在基于 Web 渲染的混合开发中，Web 页面运行在原生容器提供的 WebView 组件中，通过 JavaScript 与原生 API 进行交互，实现应用程序的功能和 UI 渲染。相比于纯 Web 应用，基于 Web 渲染的混合开发具有更好的性能和用户体验，同时又可以利用 Web 开发的高效性和跨平台特性。</p><p>目前比较流行的基于 Web 渲染的混合开发框架包括 Cordova、PhoneGap、Ionic 等。这些框架提供了丰富的 API 和插件，可以帮助开发者快速开发移动应用，并且支持多平台开发。</p><h2 id="渲染原理" tabindex="-1"><a class="header-anchor" href="#渲染原理"><span>渲染原理</span></a></h2><p>基于Web渲染的混合开发App的渲染原理都基本类似，在应用中内置一个 WebView 组件，并通过 JavaScript 代码将本地应用和 Web 应用进行交互。当用户打开应用时，会在 WebView 中加载应用的主页面，并且可以通过 JavaScript 代码来访问 WebView 的 DOM 和 CSS 样式。</p><p><img src="'+p+'" alt="Hybrid"></p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>简单来说，就是套了一层原生壳的web页面，web通过提前约定好的协议调用原生，原生调用设备本身的能力</p></div><h2 id="cordova" tabindex="-1"><a class="header-anchor" href="#cordova"><span>Cordova</span></a></h2><p><a href="https://cordova.apache.org/" target="_blank" rel="noopener noreferrer">Cordova</a>是社区最早出现的混合开发App的框架。最初由 Nitobi Software（现在是 Adobe Systems）开发，后来被 Apache 软件基金会收购并捐赠给了 Apache 基金会，成为了 Apache 的一个开源项目。</p><p>Cordova主要提供了三种能力：</p><ul><li>设备相关的API，通过API，移动应用能够以JavaScript访问原生的设备功能，如摄像头、麦克风等。</li><li>统一的JavaScript类库，以及为这些类库所用的设备相关的原生后台代码。</li><li>跨平台打包能力，支持iOS, Android, ubuntu phone os, Blackberry, Windows Phone, Palm WebOS, Bada 和 Symbian平台</li><li>自定义插件功能，可以让开发者通过 JavaScript 代码来调用设备的本地功能，如摄像头、GPS、文件系统等。</li></ul><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h3><ol><li>跨平台：Cordova 可以构建跨平台应用，支持 Android、iOS、Windows 等多个平台，开发人员只需要编写一份代码，就可以在不同的平台上运行。</li><li>快速开发：使用 Web 技术开发，无需学习复杂的原生开发语言和工具，可以快速迭代开发，并且具有较好的可维护性。</li><li>简单易用：Cordova 提供了一些常用的插件和 API，可以方便地访问设备的各种功能，如相机、地理位置、传感器等。</li><li>成熟稳定：Cordova 已经发展多年，拥有庞大的社区和生态系统，有大量的插件和模板可供选择，同时也有完善的文档和支持。</li></ol><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点</span></a></h3><ol><li>性能问题：Cordova 应用的性能受到 WebView 的限制，可能比原生应用慢一些，尤其是在处理复杂的图形和动画时。</li><li>依赖第三方库：Cordova 应用需要依赖第三方库和插件，这些库和插件可能存在安全风险或者兼容性问题，需要开发者自行评估和选择。</li><li>限制功能：Cordova 的插件机制提供了访问设备本地功能的能力，但是一些高级功能可能无法使用，需要使用原生开发来实现。</li><li>开发门槛：虽然 Cordova 简化了开发流程，但是开发人员仍然需要掌握 Web 技术和 Cordova API，需要一定的开发经验和学习成本。</li></ol><h2 id="phonegap" tabindex="-1"><a class="header-anchor" href="#phonegap"><span>PhoneGap</span></a></h2><p>PhoneGap 和 Cordova 最初是一个项目，由于商业原因被 Adobe 收购后，项目名称发生了变化，PhoneGap 成为了 Adobe 的商标，而 Cordova 成为了 Apache 基金会的开源项目。因此，PhoneGap 和 Cordova 之间的区别主要是商标所有权的区别，其余部分基本一致。</p><p>具体来说，PhoneGap 和 Cordova 都是基于 Web 技术开发移动应用的框架，采用的是混合式开发的方式，将本地应用和 Web 应用混合在一起。它们都使用 WebView 来实现 Web 应用的渲染，并且提供了访问设备本地功能的插件。</p><p>在技术实现上，PhoneGap 和 Cordova 的代码基本相同，因为 PhoneGap 本质上是 Cordova 的商标版本，是在 Cordova 的基础上添加了 Adobe 的一些功能。但是，它们在使用上可能有一些区别，比如 PhoneGap 的构建工具使用云端服务，而 Cordova 的构建工具需要在本地安装。</p><h2 id="ionic" tabindex="-1"><a class="header-anchor" href="#ionic"><span>Ionic</span></a></h2><p><a href="https://ionicframework.com/" target="_blank" rel="noopener noreferrer">Ionic</a>聚焦于感官和应用的Ui交互，它不是 Phone Gap或 Cordova的替代品，ionic只是在前端大幅度简化了APP开发。在早期，为了发挥ionic的完美功能，需要 AngularJS的配合。目前，Ionic已经无需强制要求开发者使用任何框架。</p><p>针对Cordova存在的问题，Ionic做了一些优化。</p><ul><li>内置丰富的开箱即用的原生能力</li><li>提供前端UI界面，统一标准</li><li>使用多Webview机制，利用原生转场解决流畅性问题</li></ul><h2 id="jsbridge" tabindex="-1"><a class="header-anchor" href="#jsbridge"><span>JSBridge</span></a></h2><p>JSBridge是一种基于WebView的前端解决方案，它通过JavaScript与Native之间进行通信，实现在WebView中调用Native功能或在Native中调用WebView中的JavaScript函数。JSBridge的实现原理是通过在Native端提供一个JavaScript接口，并在WebView中注入一个JSBridge对象，使得WebView中的JavaScript代码可以通过JSBridge对象与Native进行通信。</p><p>简单来说，JSBridge就是一种通讯方式，通过JSBridge，WebView可以调用原生方法，原生可以调用Web端的方法。 <img src="'+t+`" alt="JSBridge"></p><h3 id="js调用native的方式" tabindex="-1"><a class="header-anchor" href="#js调用native的方式"><span>JS调用Native的方式</span></a></h3><ol><li>拦截URL Scheme Android：Webview提供了shouldOverrideUrlLoading方法来提供给Native拦截H5发送的URL Scheme请求</li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomWebViewClient</span> <span class="token keyword">extends</span> <span class="token class-name">WebViewClient</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">shouldOverrideUrlLoading</span><span class="token punctuation">(</span><span class="token class-name">WebView</span> view<span class="token punctuation">,</span> <span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">      <span class="token comment">// 场景一： 拦截请求、接收 scheme</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;xxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// handle</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">            <span class="token comment">// callback</span></span>
<span class="line">            view<span class="token punctuation">.</span><span class="token function">loadUrl</span><span class="token punctuation">(</span><span class="token string">&quot;javascript:setAllContent(&quot;</span> <span class="token operator">+</span> json <span class="token operator">+</span> <span class="token string">&quot;);&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">shouldOverrideUrlLoading</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">     <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ios WKWebview可以根据拦截到的URL Scheme和对应的参数执行相关的操作</p><div class="language-Swift line-numbers-mode" data-highlighter="prismjs" data-ext="Swift" data-title="Swift"><pre><code><span class="line">- (void)webView:(WKWebView *)webView decidePolicyForNavigationAction:(WKNavigationAction *)navigationAction decisionHandler:(void (^)(WKNavigationActionPolicy))decisionHandler{</span>
<span class="line">    if ([navigationAction.request.URL.absoluteString hasPrefix:@&quot;xxx&quot;]) {</span>
<span class="line">        [[UIApplication sharedApplication] openURL:navigationAction.request.URL];</span>
<span class="line">    }</span>
<span class="line">    decisionHandler(WKNavigationActionPolicyAllow);</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>js调用</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token literal-property property">qunarhy</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>hy<span class="token operator">/</span>url<span class="token operator">?</span>url<span class="token operator">=</span>ymfe<span class="token punctuation">.</span>tech  <span class="token comment">// 自定义的</span></span>
<span class="line">protocol是qunarhy，host则是hy</span>
<span class="line"></span>
<span class="line">window<span class="token punctuation">.</span>webkit<span class="token punctuation">.</span>messageHandlers<span class="token punctuation">.</span>topicSelect<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">vdiscover://post_new_note?attach=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span></span>
<span class="line">window<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">vdiscover://post_new_note?attach=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>URL SCHEME是一种类似于url的链接，是为了方便app直接互相调用设计的，形式和普通的url近似，主要区别是protocol和host一般是自定义的。</p><p>拦截URL SCHEME的主要流程是：Web端通过某种方式(例如：iframe.src)发送URL Scheme请求，之后Native拦截到请求并更具URL SCHEME（包括所带的参数）进行相关的操作</p><h4 id="优点-1" tabindex="-1"><a class="header-anchor" href="#优点-1"><span>优点</span></a></h4><ul><li>不存在漏洞问题，使用灵活，可以实现H5和Native页面的无缝切换 场景：适用于快速迭代，快速开发上线，某一链接直接填写H5链接，在对应的Native页面开发完成前先跳转至H5页面。等Native页面开发完成之后再进行拦截，跳转至Native页面，此时H5链接不用修改</li></ul><h4 id="缺点-1" tabindex="-1"><a class="header-anchor" href="#缺点-1"><span>缺点</span></a></h4><ul><li>当使用iframe.src来发送URL Scheme需要对URL长度作控制，使用复杂。速度较慢 <ul><li>有些方案为了避免url长度隐患的缺陷，在ios上采用了使用ajax发送同域请求的方式，并将参数放到head或body中，这样虽然避免了url长度的隐患，但WKWebView并不支持这种方式</li><li>为什么选择iframe.src不选择location.herf?(因为如果通过location.href连续调用Native，很容易丢失一些调用)</li></ul></li><li>创建请求需要一定的耗时，比诸如API的方式调用同样的功能耗时更长。</li></ul><ol start="2"><li>注入API 基于WebView提供的能力，我们可以向Window上注入对象或方法，js可以直接使用window上的方法，这种方法js需要等到Native执行完对应的逻辑之后才能进行回调里的操作</li></ol><p>Android的WebView提供了addJavascriptInterface方法，支持Android4.2及以上的系统</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">gpcWebView<span class="token punctuation">.</span><span class="token function">addJavascriptInterface</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JavaScriptInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> &#39;nativeApiBridge&#39;<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaScriptInterface</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Context</span> mContext<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token class-name">JavaScriptInterface</span><span class="token punctuation">(</span><span class="token class-name">Context</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    mContext <span class="token operator">=</span> c<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">share</span><span class="token punctuation">(</span><span class="token class-name">String</span> webMessage<span class="token punctuation">)</span><span class="token punctuation">{</span>            </span>
<span class="line">    <span class="token comment">// Native 逻辑</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JS调用：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">window<span class="token punctuation">.</span>NativeApi<span class="token punctuation">.</span><span class="token function">share</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>iOS的UIWebView提供了JavascriptScore方法，支持iOS7.0以上的系统，WKWebview提供window.webkit.messageHandlers方法，支持iOS8.0及以上系统。UIWebview在几年前常用，目前不常见</p><div class="language-Swift line-numbers-mode" data-highlighter="prismjs" data-ext="Swift" data-title="Swift"><pre><code><span class="line">WKWebViewConfiguration *configuration = [[WKWebViewConfiguration alloc] init];</span>
<span class="line">WKPreferences *preferences = [WKPreferences new];</span>
<span class="line">preferences.javaScriptCanOpenWindowsAutomatically = YES;</span>
<span class="line">preferences.minimumFontSize = 40.0;</span>
<span class="line">configuration.preferences = preferences;</span>
<span class="line">    </span>
<span class="line"></span>
<span class="line">- (void)viewWillAppear:(BOOL)animated</span>
<span class="line">{</span>
<span class="line">    [super viewWillAppear:animated];</span>
<span class="line">    [self.webView.configuration.userContentController addScriptMessageHandler:self name:@&quot;share&quot;];</span>
<span class="line">      [self.webView.configuration.userContentController addScriptMessageHandler:self name:@&quot;pickImage&quot;];</span>
<span class="line">}</span>
<span class="line">- (void)viewWillDisappear:(BOOL)animated</span>
<span class="line">{</span>
<span class="line">    [super viewWillDisappear:animated];</span>
<span class="line">    [self.webView.configuration.userContentController     removeScriptMessageHandlerForName:@&quot;share&quot;];</span>
<span class="line">    [self.webView.configuration.userContentController removeScriptMessageHandlerForName:@&quot;pickImage&quot;];</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>js调用示例</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">  window<span class="token punctuation">.</span>webkit<span class="token punctuation">.</span>messageHandlers<span class="token punctuation">.</span>share<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="native调用js的方式" tabindex="-1"><a class="header-anchor" href="#native调用js的方式"><span>Native调用JS的方式</span></a></h3><p>Native调用js需要,JavaScript的方法必须在全局的window上即可</p><p>Android中主要有两种实现方法：</p><ul><li>Android 4.4以前，通过loadUrl方法，执行一段js代码来实现。loadUrl方式使用起来方便简洁，但是效率低无法获得返回结果且调用的时候会刷新WebView</li><li>Android 4.4以后可以使用evaluateJavascript方法。evaluateJavascript方法效率高获取返回值方便。调用的时候不刷新WebView</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">webView<span class="token punctuation">.</span><span class="token function">loadUrl</span><span class="token punctuation">(</span><span class="token string">&quot;javascript:&quot;</span> <span class="token operator">+</span> javaScriptString<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">webView<span class="token punctuation">.</span><span class="token function">evaluateJavascript</span><span class="token punctuation">(</span>javaScriptString<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ValueCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token annotation punctuation">@Override</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceiveValue</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    xxx</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ios在WKWebview中可以通过evaluateJavaScript:javaScriptString来实现，支持iOS8.0及以上系统</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token comment">// swift</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function-definition function">evaluateJavaScript</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> javaScriptString<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> </span>
<span class="line">    completionHandler<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">Any</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Void</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// javaScriptString 需要调用的 JS 代码</span></span>
<span class="line"><span class="token comment">// completionHandler 执行后的回调</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// objective-c</span></span>
<span class="line"><span class="token punctuation">[</span>jsContext evaluateJavaScript<span class="token punctuation">:</span>@<span class="token string-literal"><span class="token string">&quot;ZcyJsBridge(ev, data)&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="electron-桌面端开发" tabindex="-1"><a class="header-anchor" href="#electron-桌面端开发"><span>Electron（桌面端开发）</span></a></h2><p>Electron 是一个使用 JavaScript、HTML 和 CSS 构建跨平台的桌面应用程序。</p><p>Electron 兼容 Mac、Windows 和 Linux，可以构建出三个平台的应用程序。</p><p>Electron成功案例</p><ul><li>VSCode： 程序员最常用的开发者工具。</li><li>Atom： 是Github开发的文本编辑器，我想大部分的前端程序员都应该使用过。</li><li>slack： 聊天群组 + 大规模工具集成 + 文件整合 + 搜索的一个工具。就是把很多你常用的工具整合到了一起。</li><li>QQ： 新版QQ</li></ul><p>Electron = Chromium + Node.js + Native APIs</p><p><img src="`+l+'" alt="electron"></p><h3 id="chromium" tabindex="-1"><a class="header-anchor" href="#chromium"><span>Chromium</span></a></h3><p>Chromium 是 Google 为发展 Chrome 浏览器而启动的开源项目，Chromium 相当于 Chrome 的工程版或称实验版，新功能会率先在 Chromium 上实现，待验证后才会应用在Chrome 上，故 Chrome 的功能会相对落后但较稳定。</p><p>Chromium为Electron提供强大的UI能力，可以在不考虑兼容性的情况下开发界面。</p><h3 id="node-js" tabindex="-1"><a class="header-anchor" href="#node-js"><span>Node.js</span></a></h3><p>Node 是一个让 JavaScript 运行在服务端的开发平台，Node 使用事件驱动，非阻塞I/O 模型而得以轻量和高效。</p><p>单单靠Chromium是不能具备直接操作原生GUI能力的，Electron内集成了Nodejs，这让其在开发界面的同时也有了操作系统底层 API 的能力，Nodejs 中常用的 Path、fs、Crypto 等模块在 Electron 可以直接使用。</p><h3 id="native-api" tabindex="-1"><a class="header-anchor" href="#native-api"><span>Native API</span></a></h3><p>为了提供原生系统的GUI支持，Electron内置了原生应用程序接口，对调用一些系统功能，如调用系统通知、打开系统文件夹提供支持。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>基于Web渲染的基本原理都相同，都是原生应用嵌套Webview。Cordova、PhoneGap、Ionic等流行框架都封装了较为全面的调用原生的接口。JSBridge去除了大而全东西，将只留下web和native互相通讯的方式，更为灵活。</p><p>基于Web渲染的方案，虽然带来了快速开发的优势，但承载大量Web标准的Web容器过于笨重，以至于牺牲了一些性能和用户体验，达不到与原生同样的标准，在复杂交互和动画上较难实现出良好的用户体验。</p><p>此处框架推荐</p><ul><li>针对需要开发跨端APP来讲，如果团队中，拥有原生开发的人员，建议选择JSBridge方式，反之选择Cordova、PhoneGap、Ionic等流行框架。</li><li>针对需要开发跨端桌面应用来说，无脑Electron</li></ul>',76)]))}const d=a(o,[["render",c],["__file","web.html.vue"]]),v=JSON.parse('{"path":"/project/hybrid/web.html","title":"Web渲染","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"渲染原理","slug":"渲染原理","link":"#渲染原理","children":[]},{"level":2,"title":"Cordova","slug":"cordova","link":"#cordova","children":[{"level":3,"title":"优点","slug":"优点","link":"#优点","children":[]},{"level":3,"title":"缺点","slug":"缺点","link":"#缺点","children":[]}]},{"level":2,"title":"PhoneGap","slug":"phonegap","link":"#phonegap","children":[]},{"level":2,"title":"Ionic","slug":"ionic","link":"#ionic","children":[]},{"level":2,"title":"JSBridge","slug":"jsbridge","link":"#jsbridge","children":[{"level":3,"title":"JS调用Native的方式","slug":"js调用native的方式","link":"#js调用native的方式","children":[]},{"level":3,"title":"Native调用JS的方式","slug":"native调用js的方式","link":"#native调用js的方式","children":[]}]},{"level":2,"title":"Electron（桌面端开发）","slug":"electron-桌面端开发","link":"#electron-桌面端开发","children":[{"level":3,"title":"Chromium","slug":"chromium","link":"#chromium","children":[]},{"level":3,"title":"Node.js","slug":"node-js","link":"#node-js","children":[]},{"level":3,"title":"Native API","slug":"native-api","link":"#native-api","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"updatedTime":1733483676000,"contributors":[{"name":"gang.peng","username":"gang.peng","email":"gang.peng@szyh.com","commits":1,"url":"https://github.com/gang.peng"}]},"filePathRelative":"project/hybrid/web.md"}');export{d as comp,v as data};
