import{_ as n,c as a,a as e,o as p}from"./app-DzEwyuga.js";const t={};function o(l,s){return p(),a("div",null,s[0]||(s[0]=[e(`<h1 id="调用总结" tabindex="-1"><a class="header-anchor" href="#调用总结"><span>调用总结</span></a></h1><h2 id="transform-api" tabindex="-1"><a class="header-anchor" href="#transform-api"><span>transform API</span></a></h2><p><code>transform/transformSync</code> 对单个字符串进行操作，不需要访问文件系统。非常适合在没有文件系统的环境中使用或作为另一个工具链的一部分，它提供了两个参数：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">transform</span><span class="token punctuation">(</span>str<span class="token operator">:</span> string<span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token operator">:</span> Config<span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token operator">&lt;</span>Result<span class="token operator">&gt;</span></span>
<span class="line"><span class="token function">transformSync</span><span class="token punctuation">(</span>str<span class="token operator">:</span> string<span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token operator">:</span> Config<span class="token punctuation">)</span><span class="token operator">:</span> Result</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><code>str</code>：字符串（必填），指需要转化的代码</li><li><code>options</code>：配置项（可选），指转化需要的选项</li></ol><p>常用配置：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">Config</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">define</span><span class="token operator">:</span> object # 关键词替换</span>
<span class="line">  <span class="token literal-property property">format</span><span class="token operator">:</span> string # js 输出规范（iife<span class="token operator">/</span>cjs<span class="token operator">/</span>esm）</span>
<span class="line">  <span class="token literal-property property">loader</span><span class="token operator">:</span> string <span class="token operator">|</span> object # transform <span class="token constant">API</span> 只能使用 string</span>
<span class="line">  <span class="token literal-property property">minify</span><span class="token operator">:</span> boolean # 压缩代码，包含删除空格、重命名变量、修改语法使语法更简练</span>
<span class="line">  # 通过以下方式单独配置，上述功能</span>
<span class="line">  <span class="token literal-property property">minifyWhitespace</span><span class="token operator">:</span> boolean # 删除空格</span>
<span class="line">  <span class="token literal-property property">minifyIdentifiers</span><span class="token operator">:</span> boolean # 重命名变量</span>
<span class="line">  <span class="token literal-property property">minifySyntax</span><span class="token operator">:</span> boolean # 修改语法使语法更简练</span>
<span class="line">  <span class="token literal-property property">sourcemap</span><span class="token operator">:</span> boolean <span class="token operator">|</span> string</span>
<span class="line">  <span class="token literal-property property">target</span><span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> # 设置目标环境，默认是 esnext（使用最新 es 特性）</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// transform.mjs</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> esbuild <span class="token keyword">from</span> <span class="token string">&#39;esbuild&#39;</span></span>
<span class="line"><span class="token keyword">const</span> code <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">interface User{</span>
<span class="line">  name: string;</span>
<span class="line">  age: number;</span>
<span class="line">}</span>
<span class="line">let x: number = 1;</span>
<span class="line">const getUserInfo = (user: User) =&gt; {</span>
<span class="line">  console.log(user.name);</span>
<span class="line">  console.log(user.age);</span>
<span class="line">}</span>
<span class="line">getUserInfo({name: &#39;jack&#39;, age: 18});</span>
<span class="line"></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> esbuild<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;ts&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// minify: true,</span></span>
<span class="line">  <span class="token comment">// minifyWhitespace: true,</span></span>
<span class="line">  <span class="token comment">// sourcemap: true,</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="命令行调用" tabindex="-1"><a class="header-anchor" href="#命令行调用"><span>命令行调用</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"># 入口文件 esbuild xxx<span class="token operator">/</span>index<span class="token punctuation">.</span>ts</span>
<span class="line"># <span class="token operator">--</span>outfile<span class="token operator">=</span>xxx<span class="token operator">/</span>xxx<span class="token operator">/</span>js 输出文件</span>
<span class="line"># <span class="token operator">--</span>outdir<span class="token operator">=</span>xxx<span class="token operator">/</span> 输出目录</span>
<span class="line"># <span class="token operator">--</span>bundle 打包</span>
<span class="line"># <span class="token operator">--</span>minify 压缩</span>
<span class="line"># <span class="token operator">--</span>target<span class="token operator">=</span>esnext</span>
<span class="line"># <span class="token operator">--</span>loader<span class="token operator">:</span><span class="token punctuation">.</span>png<span class="token operator">=</span>dataurl 将 png 转换成dataurl的形式</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="js代码调用" tabindex="-1"><a class="header-anchor" href="#js代码调用"><span>JS代码调用</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">Build <span class="token constant">API</span></span>
<span class="line"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">await</span> esbuild<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">esbuild<span class="token punctuation">.</span><span class="token function">buildSync</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//同步方法</span></span>
<span class="line"><span class="token comment">//esbuild.watch()</span></span>
<span class="line"><span class="token comment">//esbuild.serve()</span></span>
<span class="line"><span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token keyword">await</span> esbuild<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> esbuid v<span class="token punctuation">.</span><span class="token number">0.17</span></span>
<span class="line"><span class="token comment">//监听文件</span></span>
<span class="line"><span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//开发服务器</span></span>
<span class="line"><span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">serve</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//重新打包</span></span>
<span class="line"><span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">rebuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="build-api" tabindex="-1"><a class="header-anchor" href="#build-api"><span>build API</span></a></h3><p>Build API调用对文件系统中的一个或多个文件进行操作。这使得文件可以相互引用，并被编译在一起（需要设置<code>bundle: true</code>）</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">build</span><span class="token punctuation">(</span>options<span class="token operator">?</span><span class="token operator">:</span> Config<span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token operator">&lt;</span>Result<span class="token operator">&gt;</span></span>
<span class="line"><span class="token function">buildSync</span><span class="token punctuation">(</span>options<span class="token operator">?</span><span class="token operator">:</span> Config<span class="token punctuation">)</span><span class="token operator">:</span> Result</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>常用配置：</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// ./node_modules/esbuild/lib/main.d.ts</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">CommonOptions</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">absWorkingDir</span><span class="token operator">:</span> string # 当前项目根目录，可通过process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>设置</span>
<span class="line">  <span class="token literal-property property">bundle</span><span class="token operator">:</span> boolean # 将所有源码打包到一起</span>
<span class="line">  <span class="token literal-property property">entryPoints</span><span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> object # 入口文件，通过对象方式可以指定输出后文件名，和 webpack 类似</span>
<span class="line">  <span class="token literal-property property">outdir</span><span class="token operator">:</span> string # 输出文件夹，不能和 outfile 同时使用；多入口文件使用 outdir</span>
<span class="line">  <span class="token literal-property property">outfile</span><span class="token operator">:</span> string # 输出的文件名，，不能和 outdir 同时使用；单入口文件使用 outfile</span>
<span class="line">  <span class="token literal-property property">outbase</span><span class="token operator">:</span> string # 每个入口文件构建到不同目录时使用</span>
<span class="line">  <span class="token literal-property property">define</span><span class="token operator">:</span> object # define <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token constant">K</span><span class="token operator">:</span> <span class="token constant">V</span><span class="token punctuation">}</span>  在解析代码的时候用<span class="token constant">V</span>替换<span class="token constant">K</span> </span>
<span class="line">  <span class="token literal-property property">platform</span><span class="token operator">:</span> string # 指定输出环境，默认为 browser 还有一个值是 node，</span>
<span class="line">  <span class="token literal-property property">format</span><span class="token operator">:</span> string # js 输出规范（iife<span class="token operator">/</span>cjs<span class="token operator">/</span>esm），如果 platform 为 browser，默认为 iife；如果 platform 为 node，默认为 cjs</span>
<span class="line">  <span class="token literal-property property">splitting</span><span class="token operator">:</span> boolean # <span class="token function">代码分割</span><span class="token punctuation">(</span>当前仅限 esm模式<span class="token punctuation">,</span>还在迭代中<span class="token operator">...</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token literal-property property">loader</span><span class="token operator">:</span> string <span class="token operator">|</span> object # transform <span class="token constant">API</span> 只能使用 string</span>
<span class="line">  <span class="token literal-property property">minify</span><span class="token operator">:</span> boolean # 压缩代码，包含删除空格、重命名变量、修改语法使语法更简练。其实就是下面三个配置的整合体minifyWhitespace，minifyIdentifiers，minifySyntax</span>
<span class="line">  <span class="token literal-property property">minifyWhitespace</span><span class="token operator">:</span> boolean # 删除空格</span>
<span class="line">  <span class="token literal-property property">minifyIdentifiers</span><span class="token operator">:</span> boolean # 重命名变量</span>
<span class="line">  <span class="token literal-property property">minifySyntax</span><span class="token operator">:</span> boolean # 修改语法使语法更简练</span>
<span class="line">  <span class="token literal-property property">sourcemap</span><span class="token operator">:</span> boolean <span class="token operator">|</span> string</span>
<span class="line">  <span class="token literal-property property">target</span><span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> # 设置目标环境，默认是 esnext（使用最新 es 特性）</span>
<span class="line">  <span class="token literal-property property">jsxFactory</span><span class="token operator">:</span> string # 指定调用每个jsx元素的函数</span>
<span class="line">  <span class="token literal-property property">jsxFragment</span><span class="token operator">:</span> string # 指定聚合一个子元素列表的函数</span>
<span class="line">  <span class="token literal-property property">assetNames</span><span class="token operator">:</span> string # 静态资源输出的文件名称（默认是名字加上hash）</span>
<span class="line">  <span class="token literal-property property">chunkNames</span><span class="token operator">:</span> string # 代码分割后输出的文件名称</span>
<span class="line">  <span class="token literal-property property">entryNames</span><span class="token operator">:</span> string # 入口文件名称</span>
<span class="line">  <span class="token literal-property property">treeShaking</span><span class="token operator">:</span> boolean # 默认为<span class="token boolean">true</span></span>
<span class="line">  <span class="token literal-property property">tsconfig</span><span class="token operator">:</span> string # 指定 tsconfig 文件</span>
<span class="line">  <span class="token literal-property property">publicPath</span><span class="token operator">:</span> string # 公共路径</span>
<span class="line">  <span class="token literal-property property">write</span><span class="token operator">:</span> boolean # 默认 <span class="token boolean">false</span>，对于cli和js <span class="token constant">API</span>，默认是写入文件系统中，设置为 <span class="token boolean">true</span> 后，写入内存缓冲区</span>
<span class="line">  <span class="token literal-property property">inject</span><span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> # 将数组中的文件导入到所有输出文件中</span>
<span class="line">  <span class="token literal-property property">metafile</span><span class="token operator">:</span> boolean # 生成依赖图 </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="加载器-loader" tabindex="-1"><a class="header-anchor" href="#加载器-loader"><span>加载器(loader)</span></a></h3><p>esbuild加载器的作用与webpack中loader作用类似，都是对于某种类型的文件进行编译</p><h4 id="_1-js-loader" tabindex="-1"><a class="header-anchor" href="#_1-js-loader"><span>1. <a href="https://esbuild.github.io/content-types/#javascript" target="_blank" rel="noopener noreferrer">js-loader</a></span></a></h4><p>这个加载器默认用于.js、.cjs和.mjs文件。.cjs扩展名被node用于CommonJS模块，而.mjs扩展名被node用于ECMAScript模块，尽管esbuild并没有对这两者进行区分。</p><p>esbuild支持所有现代JavaScript语法。然而，较新的语法可能不被旧的浏览器所支持，所以你可能想配置目标选项，告诉esbuild将较新的语法转换为适当的旧语法。</p><blockquote><p>esbuild并不支持ES5的转换，目前还不支持将ES6+语法转换为ES5。</p></blockquote><h4 id="_2-ts-loader" tabindex="-1"><a class="header-anchor" href="#_2-ts-loader"><span>2. <a href="https://esbuild.github.io/content-types/#typescript" target="_blank" rel="noopener noreferrer">ts-loader</a></span></a></h4><p><code>.ts</code>默认情况下为、<code>.tsx</code>、<code>.mts</code>和文件启用此加载器<code>.cts</code>，这意味着 esbuild 内置支持解析 TypeScript 语法并丢弃类型注释。但是，esbuild<em>不</em>执行任何类型检查</p><h4 id="_3-jsx-loader" tabindex="-1"><a class="header-anchor" href="#_3-jsx-loader"><span>3. <a href="https://esbuild.github.io/content-types/#jsx" target="_blank" rel="noopener noreferrer">jsx-loader</a></span></a></h4><p><a href="https://facebook.github.io/jsx/" target="_blank" rel="noopener noreferrer">JSX是 JavaScript 的类似 XML 的语法扩展，是为</a><a href="https://github.com/facebook/react" target="_blank" rel="noopener noreferrer">React</a>创建的。它旨在由您的构建工具转换为普通的 JavaScript。每个 XML 元素都成为一个普通的 JavaScript 函数调用。例如，以下 JSX 代码：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> Button <span class="token keyword">from</span> <span class="token string">&#39;./button&#39;</span></span>
<span class="line"><span class="token keyword">let</span> button <span class="token operator">=</span> <span class="token operator">&lt;</span>Button<span class="token operator">&gt;</span>Click me<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">&gt;</span></span>
<span class="line"><span class="token function">render</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将被转换为以下 JavaScript 代码：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> Button <span class="token keyword">from</span> <span class="token string">&quot;./button&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> button <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>Button<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;Click me&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">render</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>.jsx和.tsx会默认开启此loader，如果你的文件是.js结尾的，那么必须手动声明loader，比如：loader: { &#39;.js&#39;: &#39;jsx&#39; },</p></blockquote><h4 id="_4-json-loader" tabindex="-1"><a class="header-anchor" href="#_4-json-loader"><span>4. <a href="https://esbuild.github.io/content-types/#json" target="_blank" rel="noopener noreferrer">json-loader</a></span></a></h4><p>对于.json文件，这个加载器是默认启用的。它在构建时将JSON文件解析成一个JavaScript对象，并将该对象作为默认导出</p><h4 id="_5-css-loader" tabindex="-1"><a class="header-anchor" href="#_5-css-loader"><span>5. <a href="https://esbuild.github.io/content-types/#css" target="_blank" rel="noopener noreferrer">css-loader</a></span></a></h4><h4 id="_6-text-loader" tabindex="-1"><a class="header-anchor" href="#_6-text-loader"><span>6. <a href="https://esbuild.github.io/content-types/#text" target="_blank" rel="noopener noreferrer">text-loader</a></span></a></h4><h4 id="_7-binary-loader" tabindex="-1"><a class="header-anchor" href="#_7-binary-loader"><span>7. <a href="https://esbuild.github.io/content-types/#binary" target="_blank" rel="noopener noreferrer">binary-loader</a></span></a></h4><h4 id="_8-base64-loader" tabindex="-1"><a class="header-anchor" href="#_8-base64-loader"><span>8. <a href="https://esbuild.github.io/content-types/#base64" target="_blank" rel="noopener noreferrer">Base64-loader</a></span></a></h4><h4 id="_9-dataurl-loader" tabindex="-1"><a class="header-anchor" href="#_9-dataurl-loader"><span>9. <a href="https://esbuild.github.io/content-types/#data-url" target="_blank" rel="noopener noreferrer">dataurl-loader</a></span></a></h4><h4 id="_10-file-loader" tabindex="-1"><a class="header-anchor" href="#_10-file-loader"><span>10. <a href="https://esbuild.github.io/content-types/#file" target="_blank" rel="noopener noreferrer">file-loader</a></span></a></h4><h4 id="_11-copy-loader" tabindex="-1"><a class="header-anchor" href="#_11-copy-loader"><span>11. <a href="https://esbuild.github.io/content-types/#copy" target="_blank" rel="noopener noreferrer">copy-loader</a></span></a></h4><p>该加载程序会将文件复制到输出目录，并重写导入路径以指向复制的文件。</p><h2 id="context-api" tabindex="-1"><a class="header-anchor" href="#context-api"><span>Context API</span></a></h2><p>context API 是<a href="https://github.com/evanw/esbuild/releases/tag/v0.17.0" target="_blank" rel="noopener noreferrer"><strong>esbuild v0.17.0</strong></a>版本新加入的API，此版本不向后兼容。context函数本身可以配置<code>interface CommonOptions</code>中的所有内容</p><p>context API 主要替换了之前可以直接使用esbuild对象调用的<code>serve</code>，<code>watch</code>等函数。现在<code>serve</code>，<code>watch</code>等函数要通过context函数调用之后的对象获取，并且他们都已<strong>异步</strong>的。</p><ul><li><a href="https://esbuild.github.io/api/#watch" target="_blank" rel="noopener noreferrer"><strong>Watch mode</strong></a> 简单来说就是监听模式，当我们修改源文件的时候，会自动帮我们重建</li><li><a href="https://esbuild.github.io/api/#serve" target="_blank" rel="noopener noreferrer"><strong>Serve mode</strong></a> 启动本地开发服务器，提供最新构建的结果。注意，Serve mode会自动帮我们构建打包源文件，但是并不支持热重载</li><li><a href="https://esbuild.github.io/api/#rebuild" target="_blank" rel="noopener noreferrer"><strong>Rebuild mode</strong></a> 允许手动调用构建。当将 esbuild 与其他工具集成时这非常有用。</li></ul><p>而且在以前，esbuild是不支持<code>serve</code>，<code>watch</code>函数一起使用的，这个版本之后，允许同时使用这两个功能。主要目的，其实就是为了<strong>live load</strong>，当文件系统上的文件发生更改时，浏览器会自动重新加载页面</p><p>esbuild是通过<a href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events" target="_blank" rel="noopener noreferrer">服务器发送事件</a>来实现的<strong>live load</strong>,<strong>服务器发送事件</strong>是一种将单向消息从服务器异步传递到客户端的简单方法。服务模式现在提供一个<code>/esbuild</code>带有<code>change</code>事件的端点，每次 esbuild 的输出更改时都会触发该事件。因此，您现在可以实现简单的“实时重新加载”（即在编辑和保存文件时重新加载页面），如下所示：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">new</span> <span class="token class-name">EventSource</span><span class="token punctuation">(</span><span class="token string">&#39;/esbuild&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="完整案例" tabindex="-1"><a class="header-anchor" href="#完整案例"><span>完整案例</span></a></h2><p><strong>package.json</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token operator">...</span><span class="token operator">...</span>其他省略</span>
<span class="line">  <span class="token string-property property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string-property property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string-property property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node ./esbuild.config.js production&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string-property property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node ./esbuild.config.js development&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;module&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>esbuild.config.js</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> esbuild <span class="token keyword">from</span> <span class="token string">&quot;esbuild&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//process是一个全局对象，argv返回的是一组包含命令行参数的数组。</span></span>
<span class="line"><span class="token comment">//第一项为”node”，</span></span>
<span class="line"><span class="token comment">//第二项为执行的js的完整路径，</span></span>
<span class="line"><span class="token comment">//后面是附加在命令行后的参数</span></span>
<span class="line"><span class="token comment">//console.log(process)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> productionMode <span class="token operator">=</span> <span class="token string">&quot;development&quot;</span> <span class="token operator">!==</span> process<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//console.log(productionMode);</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token keyword">await</span> esbuild<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 当前项目根目录</span></span>
<span class="line">  <span class="token literal-property property">absWorkingDir</span><span class="token operator">:</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// 输出环境 \`node\` 或 \`browser\`, 默认为 \`browser\`</span></span>
<span class="line">  <span class="token literal-property property">platform</span><span class="token operator">:</span> <span class="token string">&quot;browser&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// 模块格式，包括\`esm\`、\`commonjs\`和\`iife\`</span></span>
<span class="line">  <span class="token comment">// 如果 platform 为 browser，默认为 iife；如果 platform 为 node，默认为 cjs</span></span>
<span class="line">  <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&quot;esm&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// 静态资源名称,可以搭配loader使用，比如 &quot;.png&quot;: &quot;file&quot;</span></span>
<span class="line">  <span class="token literal-property property">assetNames</span><span class="token operator">:</span> <span class="token string">&quot;assets/[name]-[hash]&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// 入口文件名称</span></span>
<span class="line">  <span class="token comment">// entryNames: &#39;[dir]/[name]-[hash]&#39;,</span></span>
<span class="line">  <span class="token comment">// 摇树优化,</span></span>
<span class="line">  <span class="token literal-property property">treeShaking</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// 指定 tsconfig 文件</span></span>
<span class="line">  <span class="token literal-property property">tsconfig</span><span class="token operator">:</span> <span class="token string">&quot;./tsconfig.json&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// 日志级别 \`silent\`(默认)、\`verbose\`、\`debug\`、\`info\`、\`warning\`、\`error\`</span></span>
<span class="line">  <span class="token literal-property property">logLevel</span><span class="token operator">:</span> <span class="token string">&quot;info&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">publicPath</span><span class="token operator">:</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">//esbuild 在构建之前编辑源代码以删除某些构造,比如常见的debugger和console</span></span>
<span class="line">  <span class="token comment">//目前esbuild也仅仅提供了这两个选项</span></span>
<span class="line">  <span class="token literal-property property">drop</span><span class="token operator">:</span> productionMode <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token string">&#39;debugger&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;console&#39;</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// 入口文件列表，为一个数组</span></span>
<span class="line">  <span class="token literal-property property">entryPoints</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src/app.tsx&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;src/index.html&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// 是否需要打包，一般设为 true</span></span>
<span class="line">  <span class="token literal-property property">bundle</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// 是否进行代码压缩</span></span>
<span class="line">  <span class="token literal-property property">minify</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// 是否生成 SourceMap 文件</span></span>
<span class="line">  <span class="token literal-property property">sourcemap</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// 指定语言版本和目标环境</span></span>
<span class="line">  <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;es2020&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;chrome58&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;firefox57&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;safari11&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// 是否生成打包的元信息文件</span></span>
<span class="line">  <span class="token literal-property property">metafile</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// 指定输出文件</span></span>
<span class="line">  <span class="token literal-property property">outdir</span><span class="token operator">:</span> productionMode <span class="token operator">?</span> <span class="token string">&quot;./public/dist/&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;./dist/&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// 指定loader</span></span>
<span class="line">  <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string-property property">&quot;.html&quot;</span><span class="token operator">:</span> <span class="token string">&quot;copy&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string-property property">&quot;.svg&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dataurl&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string-property property">&quot;.png&quot;</span><span class="token operator">:</span> <span class="token string">&quot;file&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// &quot;.module.css&quot;: &quot;local-css&quot;,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>productionMode<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  ctx<span class="token punctuation">.</span><span class="token function">rebuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">//释放资源</span></span>
<span class="line">  ctx<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">else</span> <span class="token punctuation">{</span> </span>
<span class="line">  <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">serve</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">servedir</span><span class="token operator">:</span> <span class="token string">&quot;./dist&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">server</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">server: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>server<span class="token punctuation">.</span>host<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>server<span class="token punctuation">.</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,53)]))}const c=n(t,[["render",o],["__file","summary.html.vue"]]),r=JSON.parse('{"path":"/advanced/esbuild/summary.html","title":"调用总结","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"transform API","slug":"transform-api","link":"#transform-api","children":[]},{"level":2,"title":"命令行调用","slug":"命令行调用","link":"#命令行调用","children":[]},{"level":2,"title":"JS代码调用","slug":"js代码调用","link":"#js代码调用","children":[{"level":3,"title":"build API","slug":"build-api","link":"#build-api","children":[]},{"level":3,"title":"加载器(loader)","slug":"加载器-loader","link":"#加载器-loader","children":[]}]},{"level":2,"title":"Context API","slug":"context-api","link":"#context-api","children":[]},{"level":2,"title":"完整案例","slug":"完整案例","link":"#完整案例","children":[]}],"git":{"updatedTime":1733483676000,"contributors":[{"name":"gang.peng","username":"gang.peng","email":"gang.peng@szyh.com","commits":1,"url":"https://github.com/gang.peng"}]},"filePathRelative":"advanced/esbuild/summary.md"}');export{c as comp,r as data};
