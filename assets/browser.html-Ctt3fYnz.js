import{_ as n,c as a,a as t,o as e}from"./app-DzEwyuga.js";const p="/smile-website/images/source/dubug/chrome-sources.png",o="/smile-website/images/source/dubug/sources-page.png",c="/smile-website/images/source/dubug/sources-filesystem.gif",l="/smile-website/images/source/dubug/sources-overrides.gif",i="/smile-website/images/source/dubug/sources-contentScripts.png",u="/smile-website/images/source/dubug/sources-snippets.gif",r="/smile-website/images/source/dubug/sources-code.gif",k="/smile-website/images/source/dubug/sources-debug.png",d="/smile-website/images/source/dubug/sources-debug-opt.png",m="/smile-website/images/source/dubug/sources-debug-opt-active.png",g="/smile-website/images/source/dubug/sources-popover.gif",h={};function b(v,s){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="浏览器调试" tabindex="-1"><a class="header-anchor" href="#浏览器调试"><span>浏览器调试</span></a></h1><p>众所周知，浏览器调试功能非常强大，涉及到了Element、Console、Sources、Network等我们前端开发中常用的各个方面，但由于本章节主要用于研究各类工具的原理，所以我们主要研究Sources模块，后续有时间可以补足其他的。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>本节所介绍功能均基于MacOS Chrome 114 版本</p></div><h2 id="sources" tabindex="-1"><a class="header-anchor" href="#sources"><span>Sources</span></a></h2><p>我们新建一个代码示例，包含两个文件 <code>index.html</code> 和 <code>index.js</code>。</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  </span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./index.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">arrFlatten</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//元素是数组则调用自身函数进行递归</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">arrFlatten</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">//元素不是数组添加到结果数组中</span></span>
<span class="line">      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">return</span> res<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">arrFlatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时打开Chrome的控制台，查看 <code>Sources</code> 模块，可以看到这个模块分为三个区域，文件区域、代码区域、调试区域</p><p><img src="`+p+'" alt="chrome sources 模块"></p><h3 id="文件区域" tabindex="-1"><a class="header-anchor" href="#文件区域"><span>文件区域</span></a></h3><p>文件区域包含五个部分，Page、Filesystem、Overrides、Content script、Snippets。</p><h4 id="page" tabindex="-1"><a class="header-anchor" href="#page"><span>Page</span></a></h4><p>通过图中的Page部分，我们可以很明显的看到，这里展示的当前页面加载的各项资源，诸如HTML、JS、CSS、图片资源。并根据来源不同，进行区分</p><p><img src="'+o+'" alt="sources page模块"></p><h4 id="filesystem" tabindex="-1"><a class="header-anchor" href="#filesystem"><span>Filesystem</span></a></h4><p>可以将本地文件添加进来，可以看做是chrome提供的在线ide，可以边修改边调试</p><p><img src="'+c+'" alt="sources filesystem模块"></p><p>如上图，在本地启动服务打开某静态页面，在Sources面板下的Filesystem面板添加静态项目到workspaces。</p><p>通过Elements面板定位锚点到某DOM节点，在Styles面板直接调试样式，重载页面后，该样式依旧有效。</p><p>通过查看样式源码，可以发现Styles面板中调试的样式已经保存到磁盘覆盖原有的样式。</p><p>上图我们可以看到Filesystem中的一些文件的文件名有绿色小点，绿点表明浏览器打开的该文件已经与本地磁盘建立连接，在浏览器调试修改文件可以直接映射到本地磁盘</p><p>【推荐】在结构、展现、动效（HTML、CSS、JavaScript）分离的静态页面项目中快速调试使用。</p><h4 id="overrides" tabindex="-1"><a class="header-anchor" href="#overrides"><span>Overrides</span></a></h4><p>这一部分可以将本地文件覆盖Page里面的文件。</p><p>它的用法是，在本地创建一个和Page栏结构完全相同的目录结构，来到我们项目Page一栏，可以看到一个形如top -&gt; 127.0.0.1:5500 -&gt; index的目录结构</p><p>然后我在本地也创建一个同样结构的目录，index.js里的内容是一行文本“hello”</p><p>然后回到控制台，进入Overrides一栏，选择刚才创建好的目录，然后刷新页面，发现js已经被替换成我的index.js，当然其他文件也可以如此操作。被覆盖的文件上可以看到一个紫色小圆点，说明该文件被本地文件替换</p><p><img src="'+l+'" alt="sources overrides模块"></p><h4 id="content-scripts" tabindex="-1"><a class="header-anchor" href="#content-scripts"><span>Content scripts</span></a></h4><p>这一部分是查看浏览器插件及浏览器本身的资源文件，如图所示</p><p><img src="'+i+'" alt="sources Content scripts模块"></p><h4 id="snippets" tabindex="-1"><a class="header-anchor" href="#snippets"><span>Snippets</span></a></h4><p>这个是一个非常实用的功能，允许我们创建代码片段，直接在chrome里运行。</p><p>如果你是个web开发者，大概有过这样的经历：想运行一段js代码做实验，怎么办呢？随便找个网页，F12，到console里敲入代码，直接运行。因为浏览器是我们最容易获取的JS运行环境，所以这么做可以让我们快速完成JS小实验。但在console窗口写代码不是很舒服，换行、缩进都很麻烦，调试起来也很烦。这时候可以用Snippets，在这里你可以很舒适地编辑代码，并运行</p><p><img src="'+u+'" alt="sources Snippets模块"></p><h3 id="代码区域" tabindex="-1"><a class="header-anchor" href="#代码区域"><span>代码区域</span></a></h3><p>这个区域允许我们</p><ul><li>查看、编辑代码，或浏览其他资源文件</li><li>在调试过程中添加断点，查看变量的值等</li></ul><h4 id="代码调试" tabindex="-1"><a class="header-anchor" href="#代码调试"><span>代码调试</span></a></h4><p>以我们之前的index.js 代码为例，我在第五行加个断点，那么程序运行到这一行的时候，就会停止，这时，我们可以利用调试工具做如下事情：</p><ul><li>我们可以在“代码区域”查看所有已执行过的变量的值</li><li>利用断点调试工具调试代码</li><li>在Watch里也可以访问所有处于该scope的变量，也可以在这里对任意表达式求值</li><li>查看程序中的线程（Threads），以及线程所处的状态</li><li>查看程序运行的调用栈（Call Stack），可以选择转移至调用栈的任意一层</li><li>查看当前所处的作用域（Scope）</li></ul><p><img src="'+r+'" alt="sources 代码调试模块"></p><h3 id="调试区域" tabindex="-1"><a class="header-anchor" href="#调试区域"><span>调试区域</span></a></h3><p>我们在进行代码的调试时，所需要的大部分功能都需要借助调试区域完成</p><p><img src="'+k+'" alt="sources 调试模块"></p><p>通过图中我们可以知道，调试区域分为两部分，断点调试工具、断点上下文</p><h4 id="断点调试工具" tabindex="-1"><a class="header-anchor" href="#断点调试工具"><span>断点调试工具</span></a></h4><p><img src="'+d+'" alt="sources 断点调试工具"></p><p>在最新的chrome中，断点调试工具共分为六个按钮，从左到右，分别是：</p><ul><li><strong>Pause script execution 暂停执行脚本</strong> 它的作用是暂停执行当前脚本，针对当前状态debug</li><li><strong>Step over next function call 跳过下一个函数调用</strong> 它的作用是运行下一行代码，然后停住，如果下一行代码里有函数调用，Chrome是不会进入该函数的，而是直接将该函数跑完。</li><li><strong>Step into next function call 进入下一个函数调用</strong> 它的作用同样是运行下一行代码，然后挺住，不同点在于如果下一行代码里有函数调用，Chrome会进入该函数。调用栈里会增加一个函数。</li><li><strong>Step out of current function 跳出当前功能</strong> 它的作用是运行当前函数其余的代码，并从函数中出来，然后停住。</li><li><strong>Deactivate breakpoints 停用断点</strong> 它可以使所有断点失效或生效</li></ul><p>如果当前处于debug状态下，第一个按钮会变成另一种功能</p><p><img src="'+m+'" alt="sources 断点调试工具"></p><p><strong>Resume script execution 恢复脚本执行</strong> 让程序继续运行，直到遇到下一个断点。</p><div class="hint-container tip"><p class="hint-container-title">小技巧</p><p>我们可以利用 <strong>暂停执行脚本</strong> 功能调试前端场景中经常出现的Popover</p><p>以Element-ui的<a href="https://element.eleme.cn/#/zh-CN/component/tooltip" target="_blank" rel="noopener noreferrer">Tooltip</a>为例, 打开控制台的Sources，鼠标悬停查看暂停执行脚本的快捷键，(Mac 是 F8 或 command + )，鼠标放在tooltip组件上，弹出提示后，使用快捷键暂停脚本，就可以在Element中查看dom了</p><p><img src="'+g+'" alt="sources 调试Popover"></p></div><h4 id="断点上下文" tabindex="-1"><a class="header-anchor" href="#断点上下文"><span>断点上下文</span></a></h4><ul><li><strong>Watch</strong> 监听变量的当前值。如果变量未设置或找不到，值将显示为 Not Available</li><li><strong>Breakpoints</strong> 展示断点列表，将每个断点所在文件/行数/改行简略内容展示。</li><li><strong>Scope</strong> 当前断点所在函数执行的作用域内容。</li><li><strong>Call stack</strong> 函数调用堆栈。函数调用堆栈显示了一条完整的导致代码被暂停的执行路径。</li><li><strong>XHR/fetch breakpoints</strong> 对达到满足过滤条件的请求进行断点拦截，点击该面板右侧加号按钮，会跳出&quot;Break when URL contains&quot;以填写过滤条件。</li><li><strong>DOM breakpoints</strong> 给DOM加断点，在达到规定条件时触发断点，截断javascript的执行并且定位到断点处</li><li><strong>Global listeners</strong> 全局事件监听。注册的全局事件会在这里显示，如onfocus、onerror等。</li><li><strong>Event listener breakpoints</strong> 在监听事件并且在触发该事件时进入断点，调试器会停留在触发事件代码行。</li><li><strong>CSP violation breakpoints</strong> 表示一种内容安全策略(Content Security Policy的简写)，如果启用这个策略，那么浏览器会对一些可能不安全的操作给出限制，在抛出错误提醒的同时，将当前操作直接中断。</li></ul>',56)]))}const S=n(h,[["render",b],["__file","browser.html.vue"]]),_=JSON.parse('{"path":"/source/debug/browser.html","title":"浏览器调试","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"Sources","slug":"sources","link":"#sources","children":[{"level":3,"title":"文件区域","slug":"文件区域","link":"#文件区域","children":[]},{"level":3,"title":"代码区域","slug":"代码区域","link":"#代码区域","children":[]},{"level":3,"title":"调试区域","slug":"调试区域","link":"#调试区域","children":[]}]}],"git":{"updatedTime":1733483676000,"contributors":[{"name":"gang.peng","username":"gang.peng","email":"gang.peng@szyh.com","commits":1,"url":"https://github.com/gang.peng"}]},"filePathRelative":"source/debug/browser.md"}');export{S as comp,_ as data};
