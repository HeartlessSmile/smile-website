import{_ as t,c as d,a as o,o as c}from"./app-DzEwyuga.js";const r={};function a(n,e){return c(),d("div",null,e[0]||(e[0]=[o(`<h1 id="命令行" tabindex="-1"><a class="header-anchor" href="#命令行"><span>命令行</span></a></h1><h2 id="开发服务器-vite" tabindex="-1"><a class="header-anchor" href="#开发服务器-vite"><span>开发服务器 <code>vite</code></span></a></h2><p>在当前目录下启动 Vite 开发服务器。<code>vite dev</code> 和 <code>vite serve</code> 是 <code>vite</code> 的别名。</p><p>开发服务器启动后，你可以在浏览器中访问指定的地址，通常是 <code>http://localhost:3000</code>（默认端口为 3000，可以通过配置进行修改）。开发服务器会实时监听文件的变化，并自动更新页面，无需手动刷新浏览器。</p><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">vite <span class="token punctuation">[</span>root<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="选项" tabindex="-1"><a class="header-anchor" href="#选项"><span>选项</span></a></h3><table><thead><tr><th>选项</th><th></th></tr></thead><tbody><tr><td><code>--host [host]</code></td><td>指定主机名称 (<code>string</code>)</td></tr><tr><td><code>--port &lt;port&gt;</code></td><td>指定端口 (<code>number</code>)</td></tr><tr><td><code>--open [path]</code></td><td>启动时打开浏览器 (<code>boolean | string</code>)</td></tr><tr><td><code>--cors</code></td><td>启用 CORS (<code>boolean</code>)</td></tr><tr><td><code>--strictPort</code></td><td>如果指定的端口已在使用中，则退出 (<code>boolean</code>)</td></tr><tr><td><code>--force</code></td><td>强制优化器忽略缓存并重新构建 (<code>boolean</code>)</td></tr><tr><td><code>-c, --config &lt;file&gt;</code></td><td>使用指定的配置文件 (<code>string</code>)</td></tr><tr><td><code>--base &lt;path&gt;</code></td><td>公共基础路径（默认为：<code>/</code>）(<code>string</code>)</td></tr><tr><td><code>-l, --logLevel &lt;level&gt;</code></td><td>info | warn | error | silent (<code>string</code>)</td></tr><tr><td><code>--clearScreen</code></td><td>允许或禁用打印日志时清除屏幕 (<code>boolean</code>)</td></tr><tr><td><code>--profile</code></td><td>启动内置的 Node.js 调试器（查看 <a href="/guide/troubleshooting#performance-bottlenecks" target="_blank" rel="noopener noreferrer">性能瓶颈</a>）</td></tr><tr><td><code>-d, --debug [feat]</code></td><td>显示调试日志 (<code>string | boolean</code>)</td></tr><tr><td><code>-f, --filter &lt;filter&gt;</code></td><td>过滤调试日志 (<code>string</code>)</td></tr><tr><td><code>-m, --mode &lt;mode&gt;</code></td><td>设置环境模式 (<code>string</code>)</td></tr><tr><td><code>-h, --help</code></td><td>显示可用的 CLI 选项</td></tr><tr><td><code>-v, --version</code></td><td>显示版本号</td></tr></tbody></table><h2 id="构建-vite-build" tabindex="-1"><a class="header-anchor" href="#构建-vite-build"><span>构建 <code>vite build</code></span></a></h2><p><code>vite build</code> 命令用于生成生产环境的构建文件。</p><p><code>Vite</code> 会对项目进行优化和打包，生成优化后的静态文件，可用于部署到生产服务器上。</p><p>生产构建过程中，<code>Vite</code> 会进行代码压缩、资源优化等操作，以确保生成的构建文件体积小、加载速度快。</p><h3 id="使用-1" tabindex="-1"><a class="header-anchor" href="#使用-1"><span>使用</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">vite build <span class="token punctuation">[</span>root<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="选项-1" tabindex="-1"><a class="header-anchor" href="#选项-1"><span>选项</span></a></h3><table><thead><tr><th>选项</th><th></th></tr></thead><tbody><tr><td><code>--target &lt;target&gt;</code></td><td>编译目标（默认为：<code>&quot;modules&quot;</code>）(<code>string</code>)</td></tr><tr><td><code>--outDir &lt;dir&gt;</code></td><td>输出目录（默认为：<code>dist</code>）(<code>string</code>)</td></tr><tr><td><code>--assetsDir &lt;dir&gt;</code></td><td>在输出目录下放置资源的目录（默认为：<code>&quot;assets&quot;</code>）(<code>string</code>)</td></tr><tr><td><code>--assetsInlineLimit &lt;number&gt;</code></td><td>静态资源内联为 base64 编码的阈值，以字节为单位（默认为：<code>4096</code>）(<code>number</code>)</td></tr><tr><td><code>--ssr [entry]</code></td><td>为服务端渲染配置指定入口文件 (<code>string</code>)</td></tr><tr><td><code>--sourcemap [output]</code></td><td>构建后输出 source map 文件（默认为：<code>false</code>）(<code>boolean | &quot;inline&quot; | &quot;hidden&quot;</code>)</td></tr><tr><td><code>--minify [minifier]</code></td><td>允许或禁用最小化混淆，或指定使用哪种混淆器（默认为：<code>&quot;esbuild&quot;</code>）(<code>boolean | &quot;terser&quot; | &quot;esbuild&quot;</code>)</td></tr><tr><td><code>--manifest [name]</code></td><td>构建后生成 manifest.json 文件 (<code>boolean | string</code>)</td></tr><tr><td><code>--ssrManifest [name]</code></td><td>构建后生成 SSR manifest.json 文件 (<code>boolean | string</code>)</td></tr><tr><td><code>--emptyOutDir</code></td><td>若输出目录在根目录外，强制清空输出目录 (<code>boolean</code>)</td></tr><tr><td><code>-w, --watch</code></td><td>在磁盘中模块发生变化时，重新构建 (<code>boolean</code>)</td></tr><tr><td><code>-c, --config &lt;file&gt;</code></td><td>使用指定的配置文件 (<code>string</code>)</td></tr><tr><td><code>--base &lt;path&gt;</code></td><td>公共基础路径（默认为：<code>/</code>）(<code>string</code>)</td></tr><tr><td><code>-l, --logLevel &lt;level&gt;</code></td><td>Info | warn | error | silent (<code>string</code>)</td></tr><tr><td><code>--clearScreen</code></td><td>允许或禁用打印日志时清除屏幕 (<code>boolean</code>)</td></tr><tr><td><code>--profile</code></td><td>启动内置的 Node.js 调试器（查看 <a href="/guide/troubleshooting#performance-bottlenecks" target="_blank" rel="noopener noreferrer">性能瓶颈</a>）</td></tr><tr><td><code>-d, --debug [feat]</code></td><td>显示调试日志 (<code>string | boolean</code>)</td></tr><tr><td><code>-f, --filter &lt;filter&gt;</code></td><td>过滤调试日志 (<code>string</code>)</td></tr><tr><td><code>-m, --mode &lt;mode&gt;</code></td><td>设置环境模式 (<code>string</code>)</td></tr><tr><td><code>-h, --help</code></td><td>显示可用的 CLI 选项</td></tr></tbody></table><h2 id="优化项目-vite-optimize" tabindex="-1"><a class="header-anchor" href="#优化项目-vite-optimize"><span>优化项目 <code>vite optimize</code></span></a></h2><p><code>vite optimize</code> 命令用于对项目进行优化。</p><p>这个命令可以分析项目的依赖关系，并进行一些优化操作，如预构建依赖、缓存优化等。</p><h3 id="使用-2" tabindex="-1"><a class="header-anchor" href="#使用-2"><span>使用</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">vite optimize <span class="token punctuation">[</span>root<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="选项-2" tabindex="-1"><a class="header-anchor" href="#选项-2"><span>选项</span></a></h3><table><thead><tr><th>选项</th><th></th></tr></thead><tbody><tr><td><code>--force</code></td><td>强制优化器忽略缓存并重新构建 (<code>boolean</code>)</td></tr><tr><td><code>-c, --config &lt;file&gt;</code></td><td>使用指定的配置文件 (<code>string</code>)</td></tr><tr><td><code>--base &lt;path&gt;</code></td><td>公共基础路径（默认为：<code>/</code>）(<code>string</code>)</td></tr><tr><td><code>-l, --logLevel &lt;level&gt;</code></td><td>Info | warn | error | silent (<code>string</code>)</td></tr><tr><td><code>--clearScreen</code></td><td>允许或禁用打印日志时清除屏幕 (<code>boolean</code>)</td></tr><tr><td><code>-d, --debug [feat]</code></td><td>显示调试日志 (<code>string | boolean</code>)</td></tr><tr><td><code>-f, --filter &lt;filter&gt;</code></td><td>过滤调试日志 (<code>string</code>)</td></tr><tr><td><code>-m, --mode &lt;mode&gt;</code></td><td>设置环境模式 (<code>string</code>)</td></tr><tr><td><code>-h, --help</code></td><td>显示可用的 CLI 选项</td></tr></tbody></table><h2 id="预览构建结果-vite-preview" tabindex="-1"><a class="header-anchor" href="#预览构建结果-vite-preview"><span>预览构建结果 <code>vite preview</code></span></a></h2><p><code>vite preview</code> 命令用于在本地预览生产构建的结果。</p><p>这将启动一个本地服务器，模拟生产环境下的部署情况，让你可以在本地查看构建后的项目效果。</p><p>通过预览，你可以检查构建后的页面是否正常显示，功能是否正常运行，确保在部署到生产服务器之前没有问题。</p><h3 id="使用-3" tabindex="-1"><a class="header-anchor" href="#使用-3"><span>使用</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">vite preview <span class="token punctuation">[</span>root<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="选项-3" tabindex="-1"><a class="header-anchor" href="#选项-3"><span>选项</span></a></h3><table><thead><tr><th>选项</th><th></th></tr></thead><tbody><tr><td><code>--host [host]</code></td><td>指定主机名称 (<code>string</code>)</td></tr><tr><td><code>--port &lt;port&gt;</code></td><td>指定端口 (<code>number</code>)</td></tr><tr><td><code>--strictPort</code></td><td>如果指定的端口已在使用中，则退出 (<code>boolean</code>)</td></tr><tr><td><code>--open [path]</code></td><td>启动时打开浏览器 (<code>boolean | string</code>)</td></tr><tr><td><code>--outDir &lt;dir&gt;</code></td><td>输出目录（默认为：<code>dist</code>)(<code>string</code>)</td></tr><tr><td><code>-c, --config &lt;file&gt;</code></td><td>使用指定的配置文件 (<code>string</code>)</td></tr><tr><td><code>--base &lt;path&gt;</code></td><td>公共基础路径（默认为：<code>/</code>）(<code>string</code>)</td></tr><tr><td><code>-l, --logLevel &lt;level&gt;</code></td><td>Info | warn | error | silent (<code>string</code>)</td></tr><tr><td><code>--clearScreen</code></td><td>允许或禁用打印日志时清除屏幕 (<code>boolean</code>)</td></tr><tr><td><code>-d, --debug [feat]</code></td><td>显示调试日志 (<code>string | boolean</code>)</td></tr><tr><td><code>-f, --filter &lt;filter&gt;</code></td><td>过滤调试日志 (<code>string</code>)</td></tr><tr><td><code>-m, --mode &lt;mode&gt;</code></td><td>设置环境模式 (<code>string</code>)</td></tr><tr><td><code>-h, --help</code></td><td>显示可用的 CLI 选项</td></tr></tbody></table><h2 id="创建项目-vite-create" tabindex="-1"><a class="header-anchor" href="#创建项目-vite-create"><span>创建项目 <code>vite create</code></span></a></h2><p><code>vite create</code>命令用于快速创建一个新的 Vite 项目。</p><p>该命令可以帮助你快速搭建一个新的前端项目架构，节省项目初始化的时间和精力。它会自动生成基本的项目结构和必要的文件，让你能够迅速开始开发。</p><p><a href="https://github.com/vitejs/vite/tree/main/packages/create-vite" target="_blank" rel="noopener noreferrer">项目模板</a></p><h3 id="使用-4" tabindex="-1"><a class="header-anchor" href="#使用-4"><span>使用</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">vite create <span class="token operator">&lt;</span>project-name<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中，<code>&lt;project-name&gt;</code>是你要创建的项目名称。</p><h3 id="选项-4" tabindex="-1"><a class="header-anchor" href="#选项-4"><span>选项</span></a></h3><table><thead><tr><th>选项</th><th></th></tr></thead><tbody><tr><td><code>--template &lt;template&gt;</code></td><td>指定项目模板 (<code>string</code>)</td></tr><tr><td><code>-p, --preset &lt;preset&gt;</code></td><td>使用预设配置 (<code>string</code>)</td></tr><tr><td><code>-c, --config &lt;file&gt;</code></td><td>使用指定的配置文件 (<code>string</code>)</td></tr><tr><td><code>-m, --mode &lt;mode&gt;</code></td><td>设置环境模式 (<code>string</code>)</td></tr><tr><td><code>-h, --help</code></td><td>显示可用的 CLI 选项</td></tr></tbody></table>`,40)]))}const s=t(r,[["render",a],["__file","cmd.html.vue"]]),l=JSON.parse('{"path":"/advanced/vite/cmd.html","title":"命令行","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"开发服务器 vite","slug":"开发服务器-vite","link":"#开发服务器-vite","children":[{"level":3,"title":"使用","slug":"使用","link":"#使用","children":[]},{"level":3,"title":"选项","slug":"选项","link":"#选项","children":[]}]},{"level":2,"title":"构建 vite build","slug":"构建-vite-build","link":"#构建-vite-build","children":[{"level":3,"title":"使用","slug":"使用-1","link":"#使用-1","children":[]},{"level":3,"title":"选项","slug":"选项-1","link":"#选项-1","children":[]}]},{"level":2,"title":"优化项目 vite optimize","slug":"优化项目-vite-optimize","link":"#优化项目-vite-optimize","children":[{"level":3,"title":"使用","slug":"使用-2","link":"#使用-2","children":[]},{"level":3,"title":"选项","slug":"选项-2","link":"#选项-2","children":[]}]},{"level":2,"title":"预览构建结果 vite preview","slug":"预览构建结果-vite-preview","link":"#预览构建结果-vite-preview","children":[{"level":3,"title":"使用","slug":"使用-3","link":"#使用-3","children":[]},{"level":3,"title":"选项","slug":"选项-3","link":"#选项-3","children":[]}]},{"level":2,"title":"创建项目 vite create","slug":"创建项目-vite-create","link":"#创建项目-vite-create","children":[{"level":3,"title":"使用","slug":"使用-4","link":"#使用-4","children":[]},{"level":3,"title":"选项","slug":"选项-4","link":"#选项-4","children":[]}]}],"git":{"updatedTime":1733483676000,"contributors":[{"name":"gang.peng","username":"gang.peng","email":"gang.peng@szyh.com","commits":1,"url":"https://github.com/gang.peng"}]},"filePathRelative":"advanced/vite/cmd.md"}');export{s as comp,l as data};
