import{_ as i}from"./vite-CBb_w8uL.js";import{_ as l,c as s,a as d,o as a}from"./app-DzEwyuga.js";const n="/smile-website/images/esbuild/WX20240823-183214.png",t="/smile-website/images/esbuild/image-20230809140430026.png",o="/smile-website/images/esbuild/image-20230809140453894.png",r={};function p(u,e){return a(),s("div",null,e[0]||(e[0]=[d('<h1 id="esbuild-概述" tabindex="-1"><a class="header-anchor" href="#esbuild-概述"><span>esbuild 概述</span></a></h1><h2 id="文档" tabindex="-1"><a class="header-anchor" href="#文档"><span>文档</span></a></h2><p><a href="https://esbuild.github.io/" target="_blank" rel="noopener noreferrer">esbuild 英文文档</a></p><p><a href="https://www.esbuild.cn/" target="_blank" rel="noopener noreferrer">esbuild 中文文档</a></p><h2 id="什么是esbuild" tabindex="-1"><a class="header-anchor" href="#什么是esbuild"><span>什么是esbuild</span></a></h2><p><code>esbuild</code> 是一种高速的 JavaScript 和 TypeScript 构建工具和打包器。它以极快的构建速度和低资源消耗著称，主要用于打包、转译和优化前端项目的代码。<code>esbuild</code> 构建工具的核心目标是开创构建工具性能的新时代， 同时创建一个易于使用的现代构建工具。</p><h2 id="有多快" tabindex="-1"><a class="header-anchor" href="#有多快"><span>有多快</span></a></h2><p>下图为 <code>esbuild</code> 和其他的构建工具使用默认配置，并从 0 开始构建 10 份 three.js 库的构建时间， 其中包括代码压缩以及 source map。</p><p><img src="'+n+'" alt="速度对比"></p><p><code>esbuild</code> 号称在目前 web 构建工具的速度大约是上述工具的 10 - 100 倍</p><h2 id="为何-esbuild-如此之快" tabindex="-1"><a class="header-anchor" href="#为何-esbuild-如此之快"><span>为何 esbuild 如此之快？</span></a></h2><ul><li><strong>用 Go 语言编写</strong></li></ul><p>Esbuild 是用 Go 语言编写的，而 Go 语言天生具备高效的并发处理能力和良好的内存管理。相比 JavaScript 编写的构建工具（如 Webpack），Go 语言在执行效率和资源消耗上有显著优势。Go 编译后的二进制文件执行速度非常快，尤其在处理大量文件和复杂操作时表现出色。</p><ul><li><strong>多核并行</strong></li></ul><p>Esbuild 的核心架构设计充分利用了多核 CPU 的优势，采用了并行处理的方式来加速构建过程。它会同时处理多个文件或任务，最大限度地利用系统资源。这种并行处理显著减少了构建时间，特别是在处理大型项目时。</p><ul><li><strong>最小化 I/O 操作</strong></li></ul><p>Esbuild 尽量减少了 I/O 操作，避免了不必要的磁盘读写。在可能的情况下，Esbuild 会将数据尽可能多地保存在内存中，而不是频繁地写入或读取磁盘。这减少了 I/O 带来的性能瓶颈。</p><ul><li><strong>直接处理源码</strong></li></ul><p>Esbuild 能够直接处理 JavaScript 和 TypeScript 源码，而无需将其转化为中间格式或依赖其他工具进行处理。传统工具往往需要将源码转化为不同的格式或依赖插件，这些过程都会增加构建时间。而 Esbuild 则简化了这些步骤，从而提高了整体效率。</p><ul><li><strong>内置的优化功能</strong></li></ul><p>Esbuild 内置了一些常见的代码优化功能，如树摇优化（Tree Shaking）和代码压缩，这些功能在构建过程中无需额外的插件或步骤，进一步加快了构建速度。</p><ul><li><strong>避免不必要的复杂性</strong></li></ul><p>Esbuild 避免了许多构建工具中常见的复杂性，比如繁重的插件系统和配置机制。它的设计哲学是简单、直接、性能至上，因此减少了很多导致速度下降的潜在因素。</p><ul><li><strong>高效的 AST 解析与处理</strong></li></ul><p>Esbuild 内部使用了高度优化的抽象语法树（AST）解析器，能够快速解析、分析和处理 JavaScript/TypeScript 代码。相比于传统构建工具使用的 JavaScript 解析器，Esbuild 的 AST 解析器速度更快且占用内存更少。</p><p>这些因素中每一点都只是有显著的提速， 但综合起来， 它们可以使得构建工具的速度比目前其他常用的构建工具快好几个数量级。</p><h2 id="有哪些缺点" tabindex="-1"><a class="header-anchor" href="#有哪些缺点"><span>有哪些缺点</span></a></h2><p>从esbuild的官方文档 <a href="https://esbuild.github.io/faq/#upcoming-roadmap" target="_blank" rel="noopener noreferrer">upcoming roadmap</a> 中，就能看出下面的问题：</p><ul><li>esbuild 没有提供 AST 的操作能力，打包产物无法降级到 ES5 及以下，不能兼容一些低版本浏览器</li><li>Code splitting 还在计划中</li><li>没有TS的类型检测</li><li>默认不支持vue，angular等代码文件格式</li><li>......</li></ul><p>简单来说，现在希望直接将esbuild放入到生产环境中，还需要一些路走，并不足以支撑一个大型项目的开发需求。有些内容虽然我们可以通过插件去实现，但是并不是开箱即用的功能，对于项目开发的新手来说，并不友好。变相增加了开发成本</p><h2 id="为什么要学习esbuild" tabindex="-1"><a class="header-anchor" href="#为什么要学习esbuild"><span>为什么要学习esbuild?</span></a></h2><p>esbuild 被我们熟知，更多的还是因为 <code>Vite</code>， <code>esbuild</code> 是组成 <code>Vite</code> 的两架马车之一。 下面是 vite 的架构图</p><p><img src="'+i+'" alt="vite架构图"></p><h2 id="为什么vite要使用esbuild" tabindex="-1"><a class="header-anchor" href="#为什么vite要使用esbuild"><span>为什么Vite要使用esbuild？</span></a></h2><p>一个字...快</p><p>现在来说，Vite在下面几个地方都依托于esbuild，而未来随着esbuild的完善，应该会做进一步处理</p><ul><li><strong>依赖预构建---作为 Bundle 工具</strong></li><li><strong>单文件编译——作为 TS 和 JSX 编译工具</strong></li><li><strong>代码压缩——作为压缩工具</strong></li></ul><h2 id="什么是no-bundle" tabindex="-1"><a class="header-anchor" href="#什么是no-bundle"><span>什么是no-bundle?</span></a></h2><p><code>ESM</code>是<code>JavaScript</code>提出的官方标准化模块系统，不同于之前的<code>CJS</code>，<code>AMD</code>，<code>CMD</code>等等，<code>ESM</code>提供了更原生以及更动态的模块加载方案，最重要的就是它是浏览器原生支持的，也就是说我们可以直接在浏览器中去执行<code>import</code>，动态引入我们需要的模块，而不是把所有模块打包在一起。</p><p>Vite 是一个提倡 <code>no-bundle</code> 的构建工具，相比于传统的 Webpack，能做到开发时的模块按需编译，而不用先打包完再加载。</p><p><img src="'+t+'" alt="image-20230809140430026"></p><p><img src="'+o+'" alt="image-20230809140453894"></p><h2 id="什么是依赖预构建" tabindex="-1"><a class="header-anchor" href="#什么是依赖预构建"><span>什么是依赖预构建？</span></a></h2><p>模块代码其实分为两部分，一部分是源代码，也就是业务代码，另一部分是第三方依赖的代码，即<code>node_modules</code>中的代码。所谓的<code>no-bundle</code>只是对于源代码而言，对于第三方依赖而言，我们基本不会去改变他，Vite 还是选择 bundle(打包)，这个部分，就依赖于<code>esbuild</code>。</p><p>但是关键点是，为什么在开发阶段我们要对第三方依赖进行预构建? 如果不进行预构建会怎么样？</p><p>首先 Vite 是基于浏览器原生 ES 模块规范实现的 Dev Server，不论是应用代码，还是第三方依赖的代码，理应符合 ESM 规范才能够正常运行。但是，我们没有办法控制第三方的打包规范。还有相当多的第三方库仍然没有 ES 版本的产物。</p><p>此外，ESM还有一个比较重要的问题——<strong>请求瀑布流问题</strong>。ESM的每个<code>import</code>都会触发一次新的文件请求，因此在<code>依赖层级深</code>、<code>涉及模块数量多</code>的情况下，会触发很多个网络请求，巨大的请求量加上 <strong>Chrome 对同一个域名下只能同时支持 6个 HTTP 并发请求的限制</strong>，导致页面加载十分缓慢，与 Vite 主导性能优势的初衷背道而驰。</p><p>在进行<strong>依赖的预构建</strong>之后，这种第三方库的代码被打包成了一个文件，这样请求的数量会骤然减少，页面加载也快了许多</p>',48)]))}const h=l(r,[["render",p],["__file","index.html.vue"]]),g=JSON.parse('{"path":"/advanced/esbuild/","title":"esbuild 概述","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"文档","slug":"文档","link":"#文档","children":[]},{"level":2,"title":"什么是esbuild","slug":"什么是esbuild","link":"#什么是esbuild","children":[]},{"level":2,"title":"有多快","slug":"有多快","link":"#有多快","children":[]},{"level":2,"title":"为何 esbuild 如此之快？","slug":"为何-esbuild-如此之快","link":"#为何-esbuild-如此之快","children":[]},{"level":2,"title":"有哪些缺点","slug":"有哪些缺点","link":"#有哪些缺点","children":[]},{"level":2,"title":"为什么要学习esbuild?","slug":"为什么要学习esbuild","link":"#为什么要学习esbuild","children":[]},{"level":2,"title":"为什么Vite要使用esbuild？","slug":"为什么vite要使用esbuild","link":"#为什么vite要使用esbuild","children":[]},{"level":2,"title":"什么是no-bundle?","slug":"什么是no-bundle","link":"#什么是no-bundle","children":[]},{"level":2,"title":"什么是依赖预构建？","slug":"什么是依赖预构建","link":"#什么是依赖预构建","children":[]}],"git":{"updatedTime":1733483676000,"contributors":[{"name":"gang.peng","username":"gang.peng","email":"gang.peng@szyh.com","commits":1,"url":"https://github.com/gang.peng"}]},"filePathRelative":"advanced/esbuild/index.md"}');export{h as comp,g as data};
