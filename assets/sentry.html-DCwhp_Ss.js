import{_ as n,c as e,a,o as t}from"./app-DzEwyuga.js";const l="/smile-website/images/sentry/login.png",i="/smile-website/images/sentry/select.png",p="/smile-website/images/sentry/setp1.png",r="/smile-website/images/sentry/setp2.png",c="/smile-website/images/sentry/setp3.png",o="/smile-website/images/sentry/error.png",d="/smile-website/images/sentry/error-source.png",u={};function m(v,s){return t(),e("div",null,s[0]||(s[0]=[a(`<h1 id="解决方案sentry" tabindex="-1"><a class="header-anchor" href="#解决方案sentry"><span>解决方案Sentry</span></a></h1><p>很多中小团队，希望集成页面监控，但受限于资源等条件，无法自研监控系统。这时候就需要一个现成的解决方案。这里推荐<a href="https://sentry.io/welcome/" target="_blank" rel="noopener noreferrer">Sentry</a></p><p>Sentry 是一个基于 Django 构建的现代化的实时事件日志监控、记录和聚合平台，主要用于如何快速的发现故障。支持几乎所有主流开发语言和平台，并提供了现代化 UI, 它专门用于监视错误和提取执行适当的事后操作所需的所有信息，而无需使用标准用户反馈循环的任何麻烦。</p><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h2><p>Sentry 提供了商用的Sass服务，可以直接在官网使用以及开源的版本，可以自行私有化部署。</p><p>私有化部署可以通过Python安装和Docker安装两种方式。个人强烈推荐使用Docker进行安装，以免还需要去研究各种配套设置的安装配置，如Kafka、Redis等。</p><h3 id="前期准备" tabindex="-1"><a class="header-anchor" href="#前期准备"><span>前期准备</span></a></h3><ul><li>Python3</li><li>Docker 19.03.6+</li><li>Compose 1.28.0+</li><li>4 CPU Cores</li><li>8 GB RAM</li><li>20 GB 磁盘空间</li></ul><h3 id="安装-sentry" tabindex="-1"><a class="header-anchor" href="#安装-sentry"><span>安装 Sentry</span></a></h3><ol><li>获取git仓库</li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> clone https://github.com/getsentry/self-hosted.git</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li>执行脚本</li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">cd</span> self-hosted</span>
<span class="line"><span class="token function">sh</span> ./install.sh</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>安装过程有些慢，在安装过程中，系统会提示是否要创建用户帐户，按照提示输入即可。</p><ol start="3"><li>设置基本配置 Sentry的安装向导会提示你设置一些基本的配置选项。具体配置项可参考<a href="https://develop.sentry.dev/config/" target="_blank" rel="noopener noreferrer">官网</a></li></ol><h3 id="启动" tabindex="-1"><a class="header-anchor" href="#启动"><span>启动</span></a></h3><p>等安装完成后，使用docker-compose 启动服务</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">docker-compose up -d</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>浏览器内访问localhost:9000，登陆安装时创建的用户账号，就可以访问sentry了</p><p><img src="`+l+'" alt="登陆"></p><h2 id="接入" tabindex="-1"><a class="header-anchor" href="#接入"><span>接入</span></a></h2><p>正常启动Sentry后，我们就可以为自己的项目创建一个project，先选择语言或者框架（以Vue为例） <img src="'+i+'" alt="创建项目"></p><p>选择Vue项目，并且点击<code>Create Project</code>按钮</p><p>按照示例代码，在自己的项目中接入sdk，并调用 <img src="'+p+'" alt="Vue SDK"><img src="'+r+'" alt="Vue SDK"><img src="'+c+`" alt="Vue SDK"></p><p>更多语言或者框架的接入方式，可以参考<a href="https://docs.sentry.io/" target="_blank" rel="noopener noreferrer">接入方法</a></p><h2 id="解析错误" tabindex="-1"><a class="header-anchor" href="#解析错误"><span>解析错误</span></a></h2><p>当我们尝试在生产环境手动抛出错误，并在Sentry 平台查看</p><div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue" data-title="vue"><pre><code><span class="line">&lt;div</span>
<span class="line">  className={style[&#39;hit&#39;]}</span>
<span class="line">  onClick={() =&gt; {</span>
<span class="line">    throw Error(&#39;报错啦=====这里&#39;)</span>
<span class="line">  }}&gt;</span>
<span class="line">  点击报错</span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们会发现，在Issues中，可以找到刚抛出的错误，但并不能准确的找到源代码的错误位置，只有编译后代码的错误位置。 <img src="`+o+`" alt="error"> 这是因为我们在生产环境运行的是编译过后的代码，本身报错堆栈就不是源代码的堆栈，如果想查看源代码的堆栈报错，我们可以将sourceMap上传到Sentry，借助sourceMap来定位源码。</p><ol><li>首先安装<a href="https://www.npmjs.com/package/@sentry/webpack-plugin" target="_blank" rel="noopener noreferrer">@sentry/webpack-plugin</a>这个包</li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">npm</span> i @sentry/webpack-plugin</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li>在webpack中使用插件</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> SentryWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@sentry/webpack-plugin&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 一般线上选择hidden-source-map模式 测试环境选用source-map</span></span>
<span class="line">  <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">&#39;source-map&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// 将 Webpack 插件设置为最后运行的插件  否则插件收到的 source maps 可能不是最终的</span></span>
<span class="line">  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">SentryWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">include</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;../build/static/js/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//需要上传到sentry服务器的文件，只需上传.map文件即可</span></span>
<span class="line">      <span class="token literal-property property">ignore</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;node_modules&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;webpack.config.js&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//忽略文件夹或文件不要被检测</span></span>
<span class="line">      <span class="token literal-property property">configFile</span><span class="token operator">:</span> <span class="token string">&#39;../.sentryclirc&#39;</span><span class="token punctuation">,</span><span class="token comment">//用来替代第二步的.sentryclirc文件 需要有对应的文件 默认不配置即可</span></span>
<span class="line">      <span class="token literal-property property">urlPrefix</span><span class="token operator">:</span> <span class="token string">&#39;~/static/js/&#39;</span><span class="token punctuation">,</span><span class="token comment">//自己项目中访问.map静态资源的文件夹的地址</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>在项目根目录新建.sentryclirc文件，进行sentry项目地址等相关配置</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">[defaults]</span>
<span class="line">project=项目名称</span>
<span class="line">org=组织settings -&gt; settings/organization-slug</span>
<span class="line">url=sentry地址</span>
<span class="line"></span>
<span class="line">[auth]</span>
<span class="line">token=sentry的Auth Token，settings -&gt; account -&gt; api -&gt; auth-tokens</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上配置完成后，sentry平台内部会做map文件和压缩js文件的关联，一般线上环境我们需要将.map文件删除，防止源代码暴漏，所以在构建之后需要手动命令删除rimraf ./build/*.map（根据项目生成的.map文件目录动态调整命令）</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line"> &quot;prod&quot;: &quot;dotenv -e ./env/.prod npm run build &amp;&amp; rimraf ./build/*.map&quot;,</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="4"><li>以上配置完成后，我们再回到sentry中，查看报错的问题</li></ol><p><img src="`+d+'" alt="error-source"></p>',39)]))}const h=n(u,[["render",m],["__file","sentry.html.vue"]]),b=JSON.parse('{"path":"/project/monitor/sentry.html","title":"解决方案Sentry","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"安装","slug":"安装","link":"#安装","children":[{"level":3,"title":"前期准备","slug":"前期准备","link":"#前期准备","children":[]},{"level":3,"title":"安装 Sentry","slug":"安装-sentry","link":"#安装-sentry","children":[]},{"level":3,"title":"启动","slug":"启动","link":"#启动","children":[]}]},{"level":2,"title":"接入","slug":"接入","link":"#接入","children":[]},{"level":2,"title":"解析错误","slug":"解析错误","link":"#解析错误","children":[]}],"git":{"updatedTime":1733483676000,"contributors":[{"name":"gang.peng","username":"gang.peng","email":"gang.peng@szyh.com","commits":1,"url":"https://github.com/gang.peng"}]},"filePathRelative":"project/monitor/sentry.md"}');export{h as comp,b as data};
