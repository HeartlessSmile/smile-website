import{_ as e}from"./vite-CBb_w8uL.js";import{_ as o,c as p,a as c,o as r}from"./app-DzEwyuga.js";const d={};function a(n,l){return r(),p("div",null,l[0]||(l[0]=[c('<h1 id="rollup-概述" tabindex="-1"><a class="header-anchor" href="#rollup-概述"><span>Rollup 概述</span></a></h1><h2 id="文档" tabindex="-1"><a class="header-anchor" href="#文档"><span>文档</span></a></h2><p><a href="https://rollupjs.org/" target="_blank" rel="noopener noreferrer">Rollup 英文文档</a></p><p><a href="https://cn.rollupjs.org/" target="_blank" rel="noopener noreferrer">Rollup 中文文档</a></p><h2 id="什么是rollup" tabindex="-1"><a class="header-anchor" href="#什么是rollup"><span>什么是Rollup</span></a></h2><p><code>Rollup</code> 是一个 <code>JavaScript</code> 模块打包工具，它可以将多个 <code>JavaScript</code> 文件（模块）打包成一个文件，使得应用程序的加载速度更快、体积更小。其主要目标是生成轻量、快速且高效的代码包，特别适用于库和框架的打包发布。</p><p><code>Rollup</code> 使用 <code>JavaScript</code> 的 <code>ES6</code> 版本中包含的新标准化代码模块格式，而不是以前的 <code>CommonJS</code> 和 <code>AMD</code> 等特殊解决方案。ES 模块允许你自由无缝地组合你最喜欢的库中最有用的个别函数。</p><h2 id="rollup-有哪些特点" tabindex="-1"><a class="header-anchor" href="#rollup-有哪些特点"><span>Rollup 有哪些特点</span></a></h2><ul><li><p><strong>模块化支持：</strong></p><p>Rollup 专注于原生 ES 模块（ESM）的打包。ES 模块允许开发者将代码拆分成多个独立的模块，这有助于提高代码的可维护性和可重用性。Rollup 可以将这些模块打包成单个文件，便于在浏览器或其他环境中运行。</p></li><li><p><strong>摇树优化（Tree-shaking）：</strong></p><p>Rollup 的一个核心特性是摇树优化，它可以自动移除代码中未使用的部分（“死代码”），从而减少最终打包文件的体积。这在优化打包库或框架时尤为重要，特别是当库中包含大量功能但只使用其中一部分时。</p></li><li><p><strong>轻量打包：</strong></p><p>Rollup 输出的代码文件非常轻量且易于理解，它生成的包往往比其他工具（如 Webpack）打包的文件更小。因为 Rollup 聚焦于移除冗余代码并保留必要的部分，以减少不必要的性能开销。</p></li><li><p><strong>可配置性和灵活性：</strong></p><p>Rollup 提供了高度可配置的插件系统，使开发者能够根据项目的需求自定义打包流程。无论是处理 CSS、TypeScript，还是其他资源类型，Rollup 都可以通过插件扩展其功能。</p></li></ul><h2 id="rollup-有哪些缺点" tabindex="-1"><a class="header-anchor" href="#rollup-有哪些缺点"><span>Rollup 有哪些缺点</span></a></h2><ul><li><strong>缺少复杂应用的功能支持</strong></li></ul><p><code>Rollup</code> 主要是为打包库和框架设计的，虽然它可以打包应用程序，但与 <code>Webpack</code> 相比，<code>Rollup</code> 在打包复杂的前端应用程序时缺少一些重要功能，例如动态导入、开发服务器和热模块替换（HMR）等功能。这使得它在开发大型前端应用程序时可能不如 <code>Webpack</code> 等工具灵活。</p><ul><li><strong>生态系统不如 Webpack 丰富</strong></li></ul><p>虽然 <code>Rollup</code> 也有插件系统，但相比 <code>Webpack</code>，<code>Rollup</code> 的插件生态相对较小。某些特定功能（如 CSS 模块化处理、复杂的资源加载等）可能需要额外的配置或开发自定义插件。</p><ul><li><strong>对非 ES 模块 支持有限</strong></li></ul><p><code>Rollup</code> 更倾向于 ES 模块的打包，而对 <code>CommonJS（CJS）</code>的支持相对较弱。虽然可以通过插件（如 <code>@rollup/plugin-commonjs</code>）来处理 <code>CommonJS</code> 模块，但与 <code>Webpack</code> 的模块处理相比，这通常需要更多配置，且在某些场景下可能无法完美兼容。</p><ul><li><strong>代码拆分功能有限</strong></li></ul><p>虽然 <code>Rollup</code> 支持代码拆分（Code Splitting），但在处理复杂的动态依赖图时，它的能力不如 Webpack。Webpack 在处理异步模块加载、动态导入和按需加载方面更具优势。</p><ul><li><strong>配置较为复杂</strong></li></ul><p>尽管 <code>Rollup</code> 的配置比 <code>Webpack</code> 更简单直观，但对于某些特定场景，比如需要整合多种工具（如 <code>Babel</code>、<code>TypeScript</code>、<code>CSS 预处理</code>等）时，<code>Rollup</code> 的配置可能变得复杂，尤其是当使用多个插件时，如何让它们协同工作可能不直观。</p><ul><li><strong>开发体验较弱</strong></li></ul><p>与 Webpack 等工具不同，<code>Rollup</code> 不自带开发服务器，因此需要额外配置诸如 <code>rollup-plugin-serve</code> 和 <code>rollup-plugin-livereload</code> 等插件来实现开发服务器和热更新功能，这使得开发体验不如 <code>Webpack</code> 方便。</p><h2 id="为什么要学习-rollup" tabindex="-1"><a class="header-anchor" href="#为什么要学习-rollup"><span>为什么要学习 Rollup</span></a></h2><p><code>Rollup</code> 特别适合构建轻量的库和工具，它生成的代码更加简洁，且可以根据项目需要生成不同格式的模块，适用于浏览器、Node.js 或其他运行环境。</p><p>许多著名的前端库（如 <code>Vue.js</code>、<code>React</code>、<code>Svelte</code>）都采用 <code>Rollup</code> 作为打包工具。学习 <code>Rollup</code> 可以让你更好地理解这些库的构建过程，并掌握相应的开发技巧。</p><p><code>Rollup</code> 和 <code>esbuild</code> 是组成 <code>Vite</code> 的两架马车。下面是 vite 的架构图</p><p><img src="'+e+'" alt="vite架构图"></p><h2 id="摇树优化-tree-shaking" tabindex="-1"><a class="header-anchor" href="#摇树优化-tree-shaking"><span>摇树优化(tree shaking)</span></a></h2><p>除了可以使用 ES 模块之外，<code>Rollup</code> 还可以静态分析你导入的代码，并将排除任何实际上没有使用的内容，从上面的引入和最后的打包结果就可以看到，没有使用到的内容直接被删除了。</p><blockquote><p>注意，<strong>摇树优化的核心思想是在编译阶段通过静态分析确定代码的使用情况，而不是在运行时</strong>。</p></blockquote><p>所以摇树优化一般是建立在<strong>ES6 模块化语法</strong>基础之上的，ESM的导入导出是静态的。</p><p>CommonJS 模块的导入和导出是动态的，无法在编译阶段静态确定代码的使用情况。一般情况下，摇树优化工具无法在 CommonJS 模块中进行精确的摇树，因为无法静态分析模块间的导入和导出关系。</p><p>然而，一些构建工具（如 Webpack）会尝试通过静态分析和启发式方法对 CommonJS 模块进行近似的摇树优化。它们会尽可能地识别出那些可以在编译阶段确定未被使用的代码，并进行剔除。但这种处理方式可能不如对 ES6 模块的优化效果好，且有一定的限制。</p><p><strong>摇树优化的原理：</strong></p><ol><li>静态分析：对 JavaScript 代码进行静态分析，识别出模块的导入和导出关系。</li><li>标记未使用代码：标记出在导入和导出关系上没有被使用的代码。这些代码可能是模块的导出函数、变量、类等。</li><li>剔除未使用代码：根据标记结果，构建工具会将未被使用的代码从最终的打包结果中剔除，只保留被使用的部分。</li></ol>',35)]))}const s=o(d,[["render",a],["__file","index.html.vue"]]),u=JSON.parse('{"path":"/advanced/rollup/","title":"Rollup 概述","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"文档","slug":"文档","link":"#文档","children":[]},{"level":2,"title":"什么是Rollup","slug":"什么是rollup","link":"#什么是rollup","children":[]},{"level":2,"title":"Rollup 有哪些特点","slug":"rollup-有哪些特点","link":"#rollup-有哪些特点","children":[]},{"level":2,"title":"Rollup 有哪些缺点","slug":"rollup-有哪些缺点","link":"#rollup-有哪些缺点","children":[]},{"level":2,"title":"为什么要学习 Rollup","slug":"为什么要学习-rollup","link":"#为什么要学习-rollup","children":[]},{"level":2,"title":"摇树优化(tree shaking)","slug":"摇树优化-tree-shaking","link":"#摇树优化-tree-shaking","children":[]}],"git":{"updatedTime":1733483676000,"contributors":[{"name":"gang.peng","username":"gang.peng","email":"gang.peng@szyh.com","commits":1,"url":"https://github.com/gang.peng"}]},"filePathRelative":"advanced/rollup/index.md"}');export{s as comp,u as data};
