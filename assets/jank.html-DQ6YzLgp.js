import{_ as s,c as a,a as e,o as p}from"./app-DzEwyuga.js";const t={};function l(i,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="卡顿监控" tabindex="-1"><a class="header-anchor" href="#卡顿监控"><span>卡顿监控</span></a></h1><p>卡顿监控是指对网站的性能进行监控，从而识别用户在使用网站时所遇到的卡顿问题。卡顿通常是由于网站在执行复杂的JavaScript操作或渲染大量内容时导致的（常见的涉及到动画、列表渲染的场景），这会使得页面加载速度变慢，影响用户的体验。</p><p>卡顿监控的原理是通过测量页面的响应时间和FPS（每秒帧数）来判断用户是否遇到了卡顿问题。</p><p>FPS是Frames Per Second的缩写，意为每秒帧数，是指显示器每秒钟能够显示的图像帧数。在计算机图形学和动画制作中，FPS是一个重要的指标，它决定了画面的流畅度和清晰度。在前端开发中，浏览器的FPS是一个重要的指标，它反映了页面的性能和用户体验。通常来说，页面的FPS应该保持在60FPS或以上，以保证页面的流畅度和响应速度。</p><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现"><span>实现</span></a></h2><p>浏览器提供了Performance API和requestAnimationFrame API来测量页面的响应时间和FPS。通过在这两个API中设置时间戳，我们可以计算出每帧所需要的时间，从而判断是否有卡顿现象。具体的实现方式可以参考下面的代码：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> fps <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span> <span class="token comment">// 帧率</span></span>
<span class="line"><span class="token keyword">let</span> frameTime <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">/</span> fps<span class="token punctuation">;</span> <span class="token comment">// 每帧所需的时间</span></span>
<span class="line"><span class="token keyword">let</span> lastFrameTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 上一帧的时间戳</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">checkFps</span><span class="token punctuation">(</span><span class="token parameter">currentTime</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> elapsed <span class="token operator">=</span> currentTime <span class="token operator">-</span> lastFrameTime<span class="token punctuation">;</span> <span class="token comment">// 计算两帧之间的时间差</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>elapsed <span class="token operator">&gt;</span> frameTime<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 如果时间差超过了每帧所需的时间，说明页面出现了卡顿</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;页面出现卡顿现象！&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>checkFps<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>checkFps<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>requestAnimationFrame是一种浏览器提供的JavaScript函数，它可以让我们在下一次重绘之前执行指定的函数。通常情况下，requestAnimationFrame的调用频率与浏览器的刷新率相同，即一秒钟60次。</p></div><h2 id="常见卡顿原因" tabindex="-1"><a class="header-anchor" href="#常见卡顿原因"><span>常见卡顿原因</span></a></h2><ol><li><p><strong>网络问题</strong> 如果前端资源文件过大或者网络请求过多，就会导致前端页面的加载速度变慢，从而出现卡顿的现象。这种情况可以通过减小资源文件的体积或者优化网络请求的方式来解决。</p></li><li><p><strong>JS代码问题</strong> JS代码过于复杂或者存在死循环等问题也会导致前端页面出现卡顿的现象。这种情况可以通过优化JS代码或者检查代码中的死循环问题来解决。</p></li><li><p><strong>CSS样式问题</strong> 如果CSS样式存在大量的层叠或者过于复杂，也会导致前端页面出现卡顿的现象。这种情况可以通过优化CSS样式或者使用CSS预编译器来解决。</p></li><li><p><strong>渲染问题</strong> 浏览器的渲染引擎也会影响前端页面的卡顿情况。当页面中存在大量的DOM元素或者复杂的布局时，浏览器会消耗更多的计算资源，从而导致页面卡顿。这种情况可以通过减少DOM元素数量或者使用虚拟滚动等技术来解决。</p></li><li><p><strong>设备问题</strong> 前端卡顿也可能是由于设备本身的问题导致的，例如设备内存不足或者处理器性能不足等。这种情况可以通过升级硬件或者减少前端页面的复杂度来解决。</p></li></ol><h2 id="常见解决方式" tabindex="-1"><a class="header-anchor" href="#常见解决方式"><span>常见解决方式</span></a></h2><ol><li><p><strong>图片懒加载</strong> 当用户滚动到图片位置时再进行加载，避免在页面初始加载时全部加载导致性能下降。</p></li><li><p><strong>压缩文件</strong> 使用压缩工具来压缩JS、CSS等文件，减少文件体积，提高页面加载速度。</p></li><li><p><strong>使用缓存</strong> 对于经常使用的资源文件，可以使用缓存机制来提高加载速度。</p></li><li><p><strong>减少HTTP请求</strong> 对于不必要的HTTP请求，例如请求重复的资源文件或者跨域请求，可以减少请求次数来提高性能。</p></li><li><p><strong>使用Web Workers</strong> Web Workers可以将一些计算密集型的任务转移到后台线程中，避免阻塞主线程，从而提高页面性能。</p></li><li><p><strong>虚拟滚动</strong> 虚拟滚动用于处理大量数据列表的渲染问题，会动态地加载和卸载元素，从而减少浏览器的渲染负担。</p></li></ol>`,12)]))}const c=s(t,[["render",l],["__file","jank.html.vue"]]),r=JSON.parse('{"path":"/project/monitor/jank.html","title":"卡顿监控","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]},{"level":2,"title":"常见卡顿原因","slug":"常见卡顿原因","link":"#常见卡顿原因","children":[]},{"level":2,"title":"常见解决方式","slug":"常见解决方式","link":"#常见解决方式","children":[]}],"git":{"updatedTime":1733483676000,"contributors":[{"name":"gang.peng","username":"gang.peng","email":"gang.peng@szyh.com","commits":1,"url":"https://github.com/gang.peng"}]},"filePathRelative":"project/monitor/jank.md"}');export{c as comp,r as data};
