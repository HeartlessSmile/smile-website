import{_ as s,c as a,a as e,o as t}from"./app-DzEwyuga.js";const o={};function p(l,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件"><span>配置文件</span></a></h1><p>当我们使用命令行方式运行 <code>vite</code> 时，<code>Vite</code> 会自动解析 项目根目录 下名为 <code>vite.config.js</code> 的配置文件（也支持其他 JS 和 TS 扩展名）。</p><p>具体使用方式，<a href="https://cn.vitejs.dev/config/" target="_blank" rel="noopener noreferrer">官网文档</a> 已经说的很详细了，这里说一些容易出错的问题</p><h2 id="ts-配置" tabindex="-1"><a class="header-anchor" href="#ts-配置"><span>TS 配置</span></a></h2><p>在使用 TypeScript 编写 Vite 配置文件时，需要配置 <code>tsconfig.json</code> 文件以确保 TypeScript 编译器正确地编译代码。以下是一些常见的配置选项：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token comment">// tsconfig.json</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;isolatedModules&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否将每个文件作为独立的模块进行编译，主要用于兼容 esbuild，esbuild 只执行没有类型信息的转译且不支持某些特性。</span></span>
<span class="line">    <span class="token property">&quot;skipLibCheck&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 当有些第三方库不能很好地兼容 “isolatedModules” 时，可使用这个属性来缓解错误。</span></span>
<span class="line">    <span class="token property">&quot;moduleResolution&quot;</span><span class="token operator">:</span> <span class="token string">&quot;bundler&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 指定使用打包工具提供的模块解析策略。</span></span>
<span class="line">    <span class="token property">&quot;esModuleInterop&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 启用对使用 CommonJS 模块的库的默认导入的支持。</span></span>
<span class="line">    <span class="token property">&quot;allowSyntheticDefaultImports&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 在没有默认导出的时候允许使用 “import x from y” 导入。</span></span>
<span class="line">    <span class="token property">&quot;noEmit&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否生成输出文件。</span></span>
<span class="line">    <span class="token property">&quot;allowImportingTsExtensions&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否允许 “.ts” 后缀文件的导入。</span></span>
<span class="line">    <span class="token property">&quot;resolveJsonModule&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 是否允许 JSON 文件作为模块。</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ts-客户端类型" tabindex="-1"><a class="header-anchor" href="#ts-客户端类型"><span>TS 客户端类型</span></a></h2><ol><li><strong>一些客户端需要用到的变量声明。图片，文件等模块化声明</strong>：在客户端代码中，可能需要声明一些变量来引用图片、文件等资源。可以使用 TypeScript 的模块化声明来确保类型安全。</li><li><strong>d.ts 声明文件</strong>： <ul><li><strong>三斜线注释</strong>：<code>/// &lt;reference types=&quot;vite/client&quot; /&gt;</code> 用于在 TypeScript 文件中引用 Vite 客户端的类型定义。</li><li><strong>ts 配置</strong>：在 <code>tsconfig.json</code> 文件中设置 <code>&quot;types&quot;:[&quot;vite/client&quot;]</code> 可以确保 TypeScript 编译器正确地识别 Vite 客户端的类型定义。</li></ul></li></ol><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// client.d.ts</span></span>
<span class="line"><span class="token comment">/// &lt;reference types=&quot;vite/client&quot; /&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;*.png&#39;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">export</span> <span class="token keyword">default</span> value<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="环境变量与模式" tabindex="-1"><a class="header-anchor" href="#环境变量与模式"><span>环境变量与模式</span></a></h2><ol><li><p><strong>process.env</strong>：在 Vite 配置文件中，可以使用 <code>process.env</code> 来访问环境变量。这些环境变量可以在不同的运行环境中设置，以控制应用的行为。</p></li><li><p><strong>添加额外的环境变量</strong>：</p><ul><li><code>.env</code>：通用的环境变量文件，可以在任何环境中使用。</li><li><code>.env.[model]</code>：特定模式下的环境变量文件，如 <code>.env.development</code> 用于开发模式。</li><li><code>.env.local</code>：本地环境变量文件，通常用于本地开发，不会被提交到版本控制系统中。</li><li><code>.env.[model].local</code>：特定模式下的本地环境变量文件。</li></ul></li><li><p><strong>加载</strong>：</p><ul><li>Vite 默认是不加载 <code>.env</code> 文件的，因为这些文件需要在执行完 Vite 配置后才能确定加载哪一个。</li><li><code>loadEnv(mode: string, envDir: string, prefixes?: string | string[])</code>：用于加载特定模式下的环境变量文件。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig<span class="token punctuation">,</span> loadEnv <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> command<span class="token punctuation">,</span> mode <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 根据当前工作目录中的 \`mode\` 加载 .env 文件</span></span>
<span class="line">  <span class="token comment">// 设置第三个参数为 &#39;&#39; 来加载所有环境变量，而不管是否有 \`VITE_\` 前缀。</span></span>
<span class="line">  <span class="token keyword">const</span> env <span class="token operator">=</span> <span class="token function">loadEnv</span><span class="token punctuation">(</span>mode<span class="token punctuation">,</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// vite 配置</span></span>
<span class="line">    <span class="token literal-property property">define</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">__APP_ENV__</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>env<span class="token punctuation">.</span><span class="token constant">APP_ENV</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>模式</strong>：</p><ul><li><strong>开发服务器 --&gt; development（开发）模式</strong>：自动加载 <code>.env.development</code> 文件。</li><li><strong>build 命令 --&gt; production（生产）模式</strong>：自动加载 <code>.env.production</code> 文件。</li><li><strong>覆盖默认模式 --model（比如 --model test）</strong>：需要加载 <code>.env.test</code> 文件。</li></ul></li><li><p><strong>import.meta.env</strong>：</p><ul><li><strong>客户端暴露环境变量</strong>：在客户端代码中，可以通过 <code>import.meta.env</code> 访问环境变量。以下是一些常见的环境变量： <ul><li><code>MODE: {string}</code>：应用运行的模式。</li><li><code>BASE_URL: {string}</code>：部署应用时的基本 URL。它由 <code>base</code> 配置项决定。</li><li><code>PROD: {boolean}</code>：应用是否运行在生产环境。</li><li><code>DEV: {boolean}</code>：应用是否运行在开发环境。</li><li><code>SSR: {boolean}</code>：应用是否运行在服务器上。</li></ul></li><li><strong>默认以 VITE_ 为前缀的变量才会暴露</strong>：可以通过设置 <code>envPrefix</code> 来指定自定义的前缀。</li><li><strong>TS 提示</strong>：可以使用接口 <code>ImportMetaEnv</code> 和 <code>ImportMeta</code> 来提供类型提示。</li></ul></li></ol>`,11)]))}const c=s(o,[["render",p],["__file","config.html.vue"]]),r=JSON.parse('{"path":"/advanced/vite/config.html","title":"配置文件","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"TS 配置","slug":"ts-配置","link":"#ts-配置","children":[]},{"level":2,"title":"TS 客户端类型","slug":"ts-客户端类型","link":"#ts-客户端类型","children":[]},{"level":2,"title":"环境变量与模式","slug":"环境变量与模式","link":"#环境变量与模式","children":[]}],"git":{"updatedTime":1733483676000,"contributors":[{"name":"gang.peng","username":"gang.peng","email":"gang.peng@szyh.com","commits":1,"url":"https://github.com/gang.peng"}]},"filePathRelative":"advanced/vite/config.md"}');export{c as comp,r as data};
