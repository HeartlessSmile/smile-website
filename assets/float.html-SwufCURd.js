import{_ as n,c as a,a as e,o as t}from"./app-DzEwyuga.js";const p={};function o(c,s){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="浮点数类型" tabindex="-1"><a class="header-anchor" href="#浮点数类型"><span>浮点数类型</span></a></h1><p>浮点数类型是指带有小数的数字，常见的浮点数类型包括<code>单精度浮点数（float，32位）</code>和<code>双精度浮点数（double，64位）</code>。单精度浮点数可以表示大约7位有效数字，而双精度浮点数可以表示大约15位有效数字。</p><p>我们之前说过，在<code>Node.js</code>中，数字类型都被表示为双精度浮点数（64 位），受到 <code>IEEE 754 标准</code>的限制。比如一道经典的面试题</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">===</span> <span class="token number">0.3</span><span class="token punctuation">)</span> <span class="token comment">// false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这就是因为<code>IEEE 754 标准</code>限制，无法精确的表示小数，计算的时候会精度丢失的问题。</p><p>在 <code>Rust</code> 中，浮点数类型有两种，分别是 32 位的单精度浮点数（<code>f32</code>）和 64 位的双精度浮点数（<code>f64</code>）。</p><ul><li>单精度浮点数（<code>f32</code>）：有效位数为 24 位，取值范围大约为 -3.4e38 到 3.4e38，精度约为 7 位小数。</li><li>双精度浮点数（<code>f64</code>）：有效位数为 53 位，取值范围大约为 -1.7e308 到 1.7e308，精度约为 15-16 位小数。</li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">let</span> x<span class="token punctuation">:</span> <span class="token keyword">f32</span> <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span> <span class="token comment">// 单精度浮点数</span></span>
<span class="line"><span class="token keyword">let</span> y<span class="token punctuation">:</span> <span class="token keyword">f64</span> <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span> <span class="token comment">// 双精度浮点数</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Rust</code>的浮点数同样遵循<code>IEEE 754 标准</code>，所以，0.1+0.2 的问题也同样存在</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">==</span> <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10)]))}const i=n(p,[["render",o],["__file","float.html.vue"]]),r=JSON.parse('{"path":"/rust/dataType/float.html","title":"浮点数类型","lang":"zh-CN","frontmatter":{},"headers":[],"git":{"updatedTime":1733483676000,"contributors":[{"name":"gang.peng","username":"gang.peng","email":"gang.peng@szyh.com","commits":1,"url":"https://github.com/gang.peng"}]},"filePathRelative":"rust/dataType/float.md"}');export{i as comp,r as data};
