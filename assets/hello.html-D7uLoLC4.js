import{_ as s,c as n,a,o as l}from"./app-DzEwyuga.js";const o={};function i(t,e){return l(),n("div",null,e[0]||(e[0]=[a(`<h1 id="hello-world-直接调用" tabindex="-1"><a class="header-anchor" href="#hello-world-直接调用"><span>Hello World! (直接调用)</span></a></h1><p>按照传统，在学习一门新的语言的时候，我们都会编写<code>Hello world!</code>的简单程序，我们也遵循这个惯例</p><p>在<code>Node.js</code>中打印 <code>Hello world!</code>，我们只需要创建一个 <code>hello.js</code> 文件，并写入如下内容</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello world!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>再通过命令行用 <code>Node.js</code> 运行这个文件，控制台可以直接打印<code>Hello world!</code></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">node</span> hello.js</span>
<span class="line">Hello world<span class="token operator">!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>同样在 <code>Rust</code> 中，我们创建一个 <code>hello.rs</code> 文件，并写入如下内容</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在很多编程语言中都使用一个入口函数（<code>main</code>函数）。虽然平常写 <code>JavaScript</code> 没有这种讲究，实际在前端工程化中，已经在使用入口函数了，只不过方式不同，现代框架里面都是 <code>SPA</code> 单入口形式，<code>Webpack</code> 默认配置打包就是 <code>main.js</code>。</p></div><p>接下来我们执行编译命令</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">rustc hello.rs</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>你会发现控制台什么输出都没有，这其实很正常，我们之前说过，<code>rustc</code>执行的只是个编译过程，将代码编译为目标平台可执行的文件，并没有执行，执行需要手动运行编译后的文件</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">./hello_world</span>
<span class="line">Hello world<span class="token operator">!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>现在控制台中可以看到打印出<code>Hello world!</code></p><p>细心的小伙伴其实已经发现，上述实例代码中，<code>JavaScript</code>和<code>Rust</code>的代码风格不一致，这是因为<code>Rust</code>是有官方风格指南的，我们可以执行打开<code>Rust</code>本地文档的命令</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">rustup doc</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>此命令会在浏览器中打开一个本地网站，我们搜索<code>The Style Guide</code>就可以找到<code>Rust</code>官方风格指南</p><p>这里需要着重说明的是</p><ol><li><code>双引号&quot;&quot;</code>用来创建一个字符串文字，<code>单引号&#39;&#39;</code>用来创建一个字符文字</li><li>在 <code>Rust</code> 中，强制使用分号 <code>;</code></li></ol>`,19)]))}const c=s(o,[["render",i],["__file","hello.html.vue"]]),p=JSON.parse('{"path":"/rust/guide/hello.html","title":"Hello World! (直接调用)","lang":"zh-CN","frontmatter":{},"headers":[],"git":{"updatedTime":1733483676000,"contributors":[{"name":"gang.peng","username":"gang.peng","email":"gang.peng@szyh.com","commits":1,"url":"https://github.com/gang.peng"}]},"filePathRelative":"rust/guide/hello.md"}');export{c as comp,p as data};
