import{_ as s,c as a,a as t,o as p}from"./app-DzEwyuga.js";const e={};function o(c,n){return p(),a("div",null,n[0]||(n[0]=[t(`<h1 id="体积及性能优化" tabindex="-1"><a class="header-anchor" href="#体积及性能优化"><span>体积及性能优化</span></a></h1><h2 id="体积优化" tabindex="-1"><a class="header-anchor" href="#体积优化"><span>体积优化</span></a></h2><p>由于监控 SDK 通常作为第一个脚本被加载到页面中，体积的膨胀不仅会增加用户的下载时间，还会增加浏览器解析脚本的时间。对于体积优化，我们可以从宏观和微观两个角度去实现。</p><h3 id="微观" tabindex="-1"><a class="header-anchor" href="#微观"><span>微观</span></a></h3><p>微观上，我们会去尽可能去精简所有的表达，剥离冗余重复代码，同时尽可能减少以下写法的出现：</p><h4 id="过多的-class-和过长的属性方法名" tabindex="-1"><a class="header-anchor" href="#过多的-class-和过长的属性方法名"><span>过多的 class 和过长的属性方法名</span></a></h4><p>Class 的定义会被转换成 function 声明 + prototype 赋值，以及常用代码压缩工具无法对 object 属性名压缩，过多的面向对象写法会让编译后的 js 代码体积膨胀得非常快。例如下列代码</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">ClassWithLongName</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">methodWithALongLongName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>经过 ts 转换后会变成</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> ClassWithLongName <span class="token operator">=</span> <span class="token doc-comment comment">/** <span class="token keyword">@class</span> */</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">ClassWithLongName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    ClassWithLongName<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">methodWithALongLongName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ClassWithLongName<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>压缩后代码为</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> <span class="token function-variable function">ClassWithLongName</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">function</span> <span class="token function">n</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">return</span> n<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">methodWithALongLongName</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>n<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>可以看到以上长命名都无法被压缩 如果使用函数式编程来代替面向对象编程，能够很好的避免代码无法被压缩的情况：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">functionWithLongName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">MethodWithALongLongName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>经过压缩后变成</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">n</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>相较于 class 的版本，压缩后的代码减小了50%以上。</p><h4 id="内部函数传参使用数组代替对象" tabindex="-1"><a class="header-anchor" href="#内部函数传参使用数组代替对象"><span>内部函数传参使用数组代替对象</span></a></h4><p>原理同上，对象中的字段名通常不会被代码压缩工具压缩。同时合理使用 TS named tuple 类型可以保证代码可维护性。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">report</span><span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> <span class="token punctuation">{</span>optionA<span class="token punctuation">,</span> optionB<span class="token punctuation">,</span> optionC<span class="token punctuation">,</span> optionD<span class="token punctuation">}</span><span class="token operator">:</span> ObjectType</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>改为</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">report</span><span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> <span class="token punctuation">[</span>optionA<span class="token punctuation">,</span> optionB<span class="token punctuation">,</span> optionC<span class="token punctuation">,</span> optionD<span class="token punctuation">]</span><span class="token operator">:</span> NamedTupleType</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="减少新语法和操作符的出现" tabindex="-1"><a class="header-anchor" href="#减少新语法和操作符的出现"><span>减少新语法和操作符的出现</span></a></h4><p>在不需要判断 nullable 时，尽可能避免 ?. ?? ??= 等操作符的出现。同理，尽可能避免一些例如 spread 操作符、generator 等新语法，这些语法在编译成 es5 后通常会引入额外的 polyfill。TS 会将这些操作符转换成非常长的代码，例如 a?.b会被转换成：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">a <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> a <span class="token operator">===</span> <span class="token keyword">void</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token keyword">void</span> <span class="token number">0</span> <span class="token operator">:</span> a<span class="token punctuation">.</span>b</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>过多的 nullish 操作符也是代码体积增加的一个原因。</p><p>当然，以上只列举了部分体积优化措施，还有更多优化方法要结合具体代码而议。对于我们的前端监控 SDK，为了性能和体积是可以牺牲一些开发体验的，并且由于使用 TS 类型系统，并不会对代码维护增加很多负担。</p><h3 id="宏观" tabindex="-1"><a class="header-anchor" href="#宏观"><span>宏观</span></a></h3><p>从宏观上，我们应该思考如何减少 SDK 所依赖的模块，减少产物包含的内容，增加产物的“信噪比”，有以下几个方式：</p><h4 id="拆分文件" tabindex="-1"><a class="header-anchor" href="#拆分文件"><span>拆分文件</span></a></h4><p>我们可以分离出 SDK 中不是必须提前执行的逻辑，拆分成异步加载的文件，仅将必须提前执行的逻辑加入初始脚本。同时将不同功能拆分成不同文件，业务按需加载，这样可以最大程度减少对首屏加载时间的影响。</p><h4 id="尽可能避免-polyfill-的使用" tabindex="-1"><a class="header-anchor" href="#尽可能避免-polyfill-的使用"><span>尽可能避免 polyfill 的使用</span></a></h4><p>polyfill 会显著增加产物体积，我们尽可能不使用存在兼容性的方法。甚至在不需要兼容低端浏览器环境时，我们可以不使用 polyfill。</p><h4 id="减少重复的常量字符串的出现次数" tabindex="-1"><a class="header-anchor" href="#减少重复的常量字符串的出现次数"><span>减少重复的常量字符串的出现次数</span></a></h4><p>对于多次重复出现的常量字符串，提取成公共变量。例如</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">a<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;load&#39;</span><span class="token punctuation">,</span> cb<span class="token punctuation">)</span></span>
<span class="line">b<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;load&#39;</span><span class="token punctuation">,</span> cb<span class="token punctuation">)</span></span>
<span class="line">c<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;load&#39;</span><span class="token punctuation">,</span> cb<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以将 addEventListener和 load 提取公共变量：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> <span class="token constant">ADD_EVENT_LISTENER</span> <span class="token operator">=</span> <span class="token string">&#39;addEventLister&#39;</span></span>
<span class="line"><span class="token keyword">let</span> <span class="token constant">LOAD</span> <span class="token operator">=</span> <span class="token string">&#39;load&#39;</span></span>
<span class="line">a<span class="token punctuation">[</span><span class="token constant">ADD_EVENT_LISTENER</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token constant">LOAD</span><span class="token punctuation">,</span> cb<span class="token punctuation">)</span></span>
<span class="line">b<span class="token punctuation">[</span><span class="token constant">ADD_EVENT_LISTENER</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token constant">LOAD</span><span class="token punctuation">,</span> cb<span class="token punctuation">)</span></span>
<span class="line">c<span class="token punctuation">[</span><span class="token constant">ADD_EVENT_LISTENER</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token constant">LOAD</span><span class="token punctuation">,</span> cb<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此段代码压缩后会变成</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> d<span class="token operator">=</span><span class="token string">&quot;addEventLister&quot;</span><span class="token punctuation">,</span>e<span class="token operator">=</span><span class="token string">&quot;load&quot;</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>cb<span class="token punctuation">)</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>cb<span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>cb<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>除了体积优化以外，随着需求不断增加，功能不断完善，不可避免的会影响到 SDK 的性能。接下来，我们介绍如何测量并优化 SDK 的性能。</p>`,41)]))}const l=s(e,[["render",o],["__file","optimize.html.vue"]]),u=JSON.parse('{"path":"/monitor/sdk/optimize.html","title":"体积及性能优化","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"体积优化","slug":"体积优化","link":"#体积优化","children":[{"level":3,"title":"微观","slug":"微观","link":"#微观","children":[]},{"level":3,"title":"宏观","slug":"宏观","link":"#宏观","children":[]}]}],"git":{"updatedTime":1733483676000,"contributors":[{"name":"gang.peng","username":"gang.peng","email":"gang.peng@szyh.com","commits":1,"url":"https://github.com/gang.peng"}]},"filePathRelative":"monitor/sdk/optimize.md"}');export{l as comp,u as data};
