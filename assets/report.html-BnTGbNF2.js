import{_ as s,c as a,a as t,o as e}from"./app-DzEwyuga.js";const p={};function i(o,n){return e(),a("div",null,n[0]||(n[0]=[t(`<h1 id="数据上报" tabindex="-1"><a class="header-anchor" href="#数据上报"><span>数据上报</span></a></h1><p>从前端的角度来讲，数据上报是前端监控系统的最后一个环节，也是至关重要的一环。它代表着我们之前收集的数据是否真正能够使用，可能单说数据上报，很多人会说，这不就是后端开个接口，前端直接调用完事，然而实际使用时，就会发现一些问题。</p><ol><li>监控系统跟业务系统是两个独立的服务，存在跨域问题</li><li>在页面关闭前上报，发送的请求会被截断</li><li>需要等待服务器返回响应结果，可能会导致浏览器的主线程被阻塞，影响页面的性能和用户体验</li><li>受到浏览器的同域并发限制，即同一个域名下同时只能有一定数量的请求在进行中，超过限制的请求会被阻塞，导致监控数据丢失</li></ol><p>为了解决这些问题，可采用如下方案</p><h2 id="_1-1像素的透明gif上报" tabindex="-1"><a class="header-anchor" href="#_1-1像素的透明gif上报"><span>1*1像素的透明GIF上报</span></a></h2><p>由于浏览器在请求图片时会将请求地址和所有的查询参数一起发送到服务器，因此通过在请求地址中添加查询参数，可以实现数据的上报功能</p><h3 id="使用图片上传的好处" tabindex="-1"><a class="header-anchor" href="#使用图片上传的好处"><span>使用图片上传的好处：</span></a></h3><ol><li><strong>防止跨域</strong> 图片的src属性并不会跨域，并且同样可以发起请求</li><li><strong>防止阻塞页面加载，影响用户体验</strong> 图片不用真实插入DOM中，即可发送请求</li></ol><h3 id="为什么是1-1像素的透明gif" tabindex="-1"><a class="header-anchor" href="#为什么是1-1像素的透明gif"><span>为什么是1*1像素的透明GIF</span></a></h3><ol><li><strong>体积小</strong> 从图片的体积上来说最小的BMP文件需要74个字节，PNG需要67个字节，而合法的GIF，只需要43个字节。同样的响应，GIF可以比BMP节约41%的流量，比PNG节约35%的流量</li><li>1x1像素是最小的合法图片</li><li>透明的图片不会影响页面本身展示的效果</li><li>透明色的图片不用存储色彩空间数据，可以节约体积</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://www.example.com/report.gif?data=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>只能发送get请求！！</p><p>动态创建图片时，赋值src会自动发起一次请求，所以不需要再将图片插入到dom中。否则会发送两次一模一样的数据</p></div><h2 id="sendbeacon" tabindex="-1"><a class="header-anchor" href="#sendbeacon"><span>sendBeacon</span></a></h2><p>使用 navigator.sendBeacon() 方法上报数据可以确保数据的可靠性和实时性，因为它可以在页面卸载前异步传输数据到服务器，并且不会阻塞页面的卸载。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> log <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;Some error message&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// ... 其他信息</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">navigator<span class="token punctuation">.</span><span class="token function">sendBeacon</span><span class="token punctuation">(</span><span class="token string">&#39;/api/log&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码会将错误日志以 JSON 格式发送到 /api/log 地址。由于 navigator.sendBeacon() 方法不支持响应信息，因此无法知道数据是否成功发送到服务器。如果需要确认数据是否已经成功接收，可以通过服务器端的日志来判断。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>navigator.sendBeacon()只能发送少量数据，通常不超过 64KB，且只支持 POST 请求，不支持同步请求，因此不能保证数据一定会被发送到服务器。</p></div>`,17)]))}const c=s(p,[["render",i],["__file","report.html.vue"]]),r=JSON.parse('{"path":"/project/monitor/report.html","title":"数据上报","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"1*1像素的透明GIF上报","slug":"_1-1像素的透明gif上报","link":"#_1-1像素的透明gif上报","children":[{"level":3,"title":"使用图片上传的好处：","slug":"使用图片上传的好处","link":"#使用图片上传的好处","children":[]},{"level":3,"title":"为什么是1*1像素的透明GIF","slug":"为什么是1-1像素的透明gif","link":"#为什么是1-1像素的透明gif","children":[]}]},{"level":2,"title":"sendBeacon","slug":"sendbeacon","link":"#sendbeacon","children":[]}],"git":{"updatedTime":1733483676000,"contributors":[{"name":"gang.peng","username":"gang.peng","email":"gang.peng@szyh.com","commits":1,"url":"https://github.com/gang.peng"}]},"filePathRelative":"project/monitor/report.md"}');export{c as comp,r as data};
