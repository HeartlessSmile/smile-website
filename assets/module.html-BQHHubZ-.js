import{_ as s,c as a,a as p,o as e}from"./app-DzEwyuga.js";const t="/smile-website/images/module.png",l={};function c(o,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="组件化" tabindex="-1"><a class="header-anchor" href="#组件化"><span>组件化</span></a></h1><p>前端组件化是将一个页面或应用程序拆分成多个独立的组件，每个组件都有自己的功能和样式，可以在不同的页面或应用程序中重复使用。这种组件化的方式可以提高代码的复用性、可维护性和可扩展性。</p><h2 id="高内聚低耦合" tabindex="-1"><a class="header-anchor" href="#高内聚低耦合"><span>高内聚低耦合</span></a></h2><p>组件化的核心思想是高内聚低耦合。</p><p>高内聚低耦合是一种软件设计原则，旨在提高代码的可读性、可维护性和可扩展性。它建议将相关的功能模块组合在一起，减少模块之间的依赖性，并使模块的实现细节对其他模块不可见。</p><p>具体来说，高内聚低耦合的原则要求：</p><ul><li>高内聚：一个模块内部各个元素之间的联系应该尽可能紧密，以实现单一职责和高度独立的功能。也就是说，一个模块应该只做一件事情，并且将所有与该功能相关的代码放在一起，而不是分散在多个文件或类中。</li><li>低耦合：不同模块之间的依赖关系应该尽可能少，即模块之间应该是松散耦合的。模块之间的关系应该通过接口或抽象类等方式进行定义，以减少模块之间的直接依赖关系。</li></ul><p>高内聚低耦合的优点包括：</p><ul><li>更易于理解和维护：相对于松散耦合的代码，高内聚低耦合的代码更容易查找和修改，因为所有相关的代码都在一起。</li><li>更易于测试和重用：高内聚低耦合的代码更容易进行单元测试和模块重用，因为模块的功能和接口都是清晰和独立的。</li><li>更易于扩展和修改：高内聚低耦合的代码更容易进行扩展和修改，因为模块之间的依赖关系是明确的，可以通过修改接口或抽象类来影响模块的行为。</li></ul><p>举个简单的例子，实现购物车功能</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 购物车模块</span></span>
<span class="line"><span class="token keyword">var</span> cartModule <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 私有变量和方法</span></span>
<span class="line">  <span class="token keyword">var</span> cartItems <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 商品列表</span></span>
<span class="line">  <span class="token keyword">var</span> totalPrice <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 总价</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">addItem</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 添加商品</span></span>
<span class="line">    cartItems<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    totalPrice <span class="token operator">+=</span> item<span class="token punctuation">.</span>price<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 删除商品</span></span>
<span class="line">    <span class="token keyword">var</span> item <span class="token operator">=</span> cartItems<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    totalPrice <span class="token operator">-=</span> item<span class="token punctuation">.</span>price<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 获取商品列表</span></span>
<span class="line">    <span class="token keyword">return</span> cartItems<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">getTotalPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 获取总价</span></span>
<span class="line">    <span class="token keyword">return</span> totalPrice<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 公有方法</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">addItem</span><span class="token operator">:</span> addItem<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">removeItem</span><span class="token operator">:</span> removeItem<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">getItems</span><span class="token operator">:</span> getItems<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">getTotalPrice</span><span class="token operator">:</span> getTotalPrice</span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 商品模块</span></span>
<span class="line"><span class="token keyword">var</span> itemModule <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 私有变量和方法</span></span>
<span class="line">  <span class="token keyword">var</span> name<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">var</span> price<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 公有方法</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function-variable function">setName</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 设置名称</span></span>
<span class="line">      name <span class="token operator">=</span> value<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">setPrice</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 设置价格</span></span>
<span class="line">      price <span class="token operator">=</span> value<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">getName</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 获取名称</span></span>
<span class="line">      <span class="token keyword">return</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">getPrice</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 获取价格</span></span>
<span class="line">      <span class="token keyword">return</span> price<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">addToCart</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 添加到购物车</span></span>
<span class="line">      <span class="token keyword">var</span> item <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">name</span><span class="token operator">:</span> name<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">price</span><span class="token operator">:</span> price</span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">      cartModule<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用示例</span></span>
<span class="line">itemModule<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;苹果&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">itemModule<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">itemModule<span class="token punctuation">.</span><span class="token function">addToCart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cartModule<span class="token punctuation">.</span><span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 [{name: &quot;苹果&quot;, price: 5}]</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cartModule<span class="token punctuation">.</span><span class="token function">getTotalPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 5</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，购物车模块和商品模块被封装在各自的匿名函数中。购物车模块包含了私有变量和方法，如商品列表和计算总价的方法；同时，它也暴露了公有方法，如添加商品和获取商品列表和总价。商品模块也类似，包含了私有变量和方法，如商品名称和价格；同时，它也暴露了公有方法，如添加到购物车和获取商品信息。</p><p>通过这种方式，购物车模块和商品模块可以在不互相依赖的情况下工作。商品模块只需要调用购物车模块暴露的公有方法来添加商品到购物车，而不需要了解购物车模块的内部实现。这就体现了高内聚低耦合的设计原则。</p><h2 id="模块化" tabindex="-1"><a class="header-anchor" href="#模块化"><span>模块化</span></a></h2><p>在高内聚低耦合的思想下，前端逐渐衍生出了模块化。</p><p>前端模块化可以将一个大型的前端项目拆分成多个小模块，方便管理和维护。常见的前端模块化规范有 CommonJS、AMD、CMD 和 ES6 Module。</p><h3 id="commonjs" tabindex="-1"><a class="header-anchor" href="#commonjs"><span>CommonJS</span></a></h3><p>CommonJS 规范最初是为了 Node.js 而设计的，目的是让 JavaScript 可以在服务端运行。CommonJS 规范的实现方式是通过 require() 方法加载模块，并通过 module.exports 导出模块。</p><p>示例：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// module1.js </span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> </span>
<span class="line">  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> </span>
<span class="line"><span class="token punctuation">}</span> </span>
<span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span> </span>
<span class="line">  add </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"></span>
<span class="line"><span class="token comment">// module2.js </span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> add <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./module1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="amd" tabindex="-1"><a class="header-anchor" href="#amd"><span>AMD</span></a></h3><p>AMD（Asynchronous Module Definition）是一个在浏览器端异步加载模块的规范，常用的实现库是 require.js。AMD 规范的特点是可以异步加载模块，适用于浏览器端，但不适用于 Node.js。</p><p>示例：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"></span>
<span class="line"><span class="token comment">// module1.js </span></span>
<span class="line"><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> </span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> </span>
<span class="line">    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> </span>
<span class="line">  <span class="token punctuation">}</span> </span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span> add <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// module2.js </span></span>
<span class="line"><span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;./module1&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> </span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="cmd" tabindex="-1"><a class="header-anchor" href="#cmd"><span>CMD</span></a></h3><p>CMD（Common Module Definition）是一个在浏览器端异步加载模块的规范，与 AMD 类似，但是 CMD 是在模块使用时再去加载，而不是在定义时就去加载。CMD 规范的实现库是 sea.js。</p><p>示例：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// module1.js </span></span>
<span class="line"><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> </span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> </span>
<span class="line">    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> </span>
<span class="line">  <span class="token punctuation">}</span> </span>
<span class="line">  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span> add <span class="token punctuation">}</span> </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// module2.js </span></span>
<span class="line"><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">require</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> </span>
<span class="line">  <span class="token keyword">const</span> module1 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./module1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="es6-module" tabindex="-1"><a class="header-anchor" href="#es6-module"><span>ES6 Module</span></a></h3><p>ES6 Module 是 ECMAScript 6 引入的原生模块化规范，支持异步加载和静态加载。ES6 Module 的特点是可以通过 import 和 export 关键字来导入和导出模块，同时也支持默认导出和命名导出。</p><p>示例：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// module1.js </span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> </span>
<span class="line">  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// module2.js </span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> add <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./module1&#39;</span><span class="token punctuation">;</span> </span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="组件化-1" tabindex="-1"><a class="header-anchor" href="#组件化-1"><span>组件化</span></a></h2><p>前端通过高内聚低耦合的思想指导，通过模块化的方式拆分，形成了具有前端特色的组件化。</p><p>我们可以认为，组件就是页面里的 UI 组件，一个页面可以由很多组件构成。例如一个后台管理系统页面，可能包含了 Header、Sidebar、Main 等各种组件。</p><p>一个组件又包含了 template(html)、script、style 三部分，其中 script、style 可以由一个或多个模块组成。</p><p><img src="`+t+'" alt="组件化拆分"></p><p>在前端开发中，常见的组件化技术包括以下几种：</p><ul><li>原生组件化：利用 HTML、CSS 和 JavaScript 等原生技术手动实现组件化，例如使用 Web Components、自定义元素等。</li><li>基于框架的组件化：利用前端框架，如 React、Vue、Angular 等提供的组件化机制来实现组件化。这些框架提供了组件的定义、渲染、生命周期管理等功能，使得组件化开发更加方便和高效。</li><li>UI 库/组件库：利用现成的 UI 库或组件库，如 Ant Design、Element UI、Bootstrap 等，通过调用库中提供的组件来实现组件化开发。这种方式可以极大地提高开发效率，但需要注意与项目需求的匹配程度。</li></ul><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><p>模块化、组件化已经成了前端工程领域不可分割的一部分，利用好组件化的思想，可以极大地提高开发效率。建议有条件的团队，可以尝试封装属于自己团队的组件库。</p>',45)]))}const u=s(l,[["render",c],["__file","module.html.vue"]]),r=JSON.parse('{"path":"/project/component/module.html","title":"组件化","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"高内聚低耦合","slug":"高内聚低耦合","link":"#高内聚低耦合","children":[]},{"level":2,"title":"模块化","slug":"模块化","link":"#模块化","children":[{"level":3,"title":"CommonJS","slug":"commonjs","link":"#commonjs","children":[]},{"level":3,"title":"AMD","slug":"amd","link":"#amd","children":[]},{"level":3,"title":"CMD","slug":"cmd","link":"#cmd","children":[]},{"level":3,"title":"ES6 Module","slug":"es6-module","link":"#es6-module","children":[]}]},{"level":2,"title":"组件化","slug":"组件化-1","link":"#组件化-1","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"git":{"updatedTime":1733483676000,"contributors":[{"name":"gang.peng","username":"gang.peng","email":"gang.peng@szyh.com","commits":1,"url":"https://github.com/gang.peng"}]},"filePathRelative":"project/component/module.md"}');export{u as comp,r as data};
