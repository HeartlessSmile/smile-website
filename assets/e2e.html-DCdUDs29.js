import{_ as s,c as a,a as t,o as p}from"./app-DzEwyuga.js";const e={};function c(i,n){return p(),a("div",null,n[0]||(n[0]=[t(`<h1 id="端到端测试-e2e" tabindex="-1"><a class="header-anchor" href="#端到端测试-e2e"><span>端到端测试(E2E)</span></a></h1><p>端到端测试是一种自动化测试方式，用于测试一个系统的完整流程，从用户界面到后端系统，确保所有组件和系统都能够正确地协同工作。它模拟用户的真实行为，包括用户输入和系统响应，测试整个系统的交互、一致性和可靠性。</p><p>端到端测试的目的是确保系统在用户层面上的功能和可用性。它通常包括以下步骤：</p><ul><li>模拟用户操作：通过模拟用户的操作，测试系统在用户界面上的响应和交互是否正确。</li><li>测试系统功能：测试系统的各项功能是否按照预期运作，包括输入数据、处理逻辑和输出结果。</li><li>验证数据一致性：测试数据在不同组件和系统之间的传输和存储是否一致。</li><li>测试系统可靠性：测试系统的鲁棒性和稳定性，例如测试系统在负载高峰时的表现。</li><li>环境模拟：测试系统在不同环境下的表现，例如测试系统在生产环境和开发环境的表现是否一致。</li><li>监控和报告：监控测试结果，及时发现和报告问题，并跟踪问题的解决情况。</li></ul><p>前端端到端测试使用的库有很多，以下是几个比较流行的：</p><ul><li>Cypress：一个基于 Electron 构建的自动化端到端测试框架，它使用了最新的 Web 技术，提供了简单易用的 API，支持跨浏览器自动化测试。</li><li>Puppeteer：Google 出品的基于 Node.js 的端到端测试库，提供了一个高级的 API，可以让你控制 Chrome 或 Chromium 浏览器的行为，支持各种自定义操作。</li><li>TestCafe：另一个基于 Node.js 的自动化测试框架，使用了无头浏览器和真实浏览器结合的方式来执行测试，支持并行测试和分布式测试。</li><li>Nightwatch.js：一个使用 Node.js 编写的端到端测试框架，基于 Selenium WebDriver，并且提供了易于使用的 API 和内置的断言库。</li><li>Playwright：一个由 Microsoft 开发的自动化测试库，支持 Chromium、Firefox 和 WebKit 三种浏览器，提供了简单易用的 API 和一些方便的工具。</li></ul><h2 id="cypress-实例" tabindex="-1"><a class="header-anchor" href="#cypress-实例"><span>Cypress 实例</span></a></h2><p>接下来我们使用Cypress来测试一个简单的计算器应用程序。</p><ol><li>首先，在你的项目中安装 Cypress，可以使用以下命令：</li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">npm</span> <span class="token function">install</span> cypress --save-dev</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后在你的项目根目录下创建 cypress/integration 目录，并创建一个新的测试文件 calculator.spec.js，添加以下代码：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;Calculator App&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;performs addition&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    cy<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token string">&#39;http://localhost:3000&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;button[value=&quot;1&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;button[value=&quot;+&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;button[value=&quot;2&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;button[value=&quot;=&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;.result&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.text&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;performs subtraction&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    cy<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token string">&#39;http://localhost:3000&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;button[value=&quot;5&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;button[value=&quot;-&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;button[value=&quot;3&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;button[value=&quot;=&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;.result&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.text&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上测试用例包含两个测试，一个测试加法，一个测试减法。在每个测试中，我们使用 cy.visit 命令访问我们的应用程序，并使用 cy.get 命令选择按钮并模拟单击。然后，我们使用 cy.get 命令获取结果元素，并使用 should 断言结果是否正确。</p><p>在你的项目中启动你的应用程序，并使用以下命令运行 Cypress 测试：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">npx cypress run</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或者在 GUI 模式下运行：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">npx cypress <span class="token function">open</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这将打开 Cypress GUI，你可以在其中运行测试并查看测试结果。</p><p>当然，这只是一个简单的示例。在实际项目中，测试用例可能会更加复杂，并涉及到许多其他的测试场景。</p>`,19)]))}const o=s(e,[["render",c],["__file","e2e.html.vue"]]),u=JSON.parse('{"path":"/project/test/e2e.html","title":"端到端测试(E2E)","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"Cypress 实例","slug":"cypress-实例","link":"#cypress-实例","children":[]}],"git":{"updatedTime":1733483676000,"contributors":[{"name":"gang.peng","username":"gang.peng","email":"gang.peng@szyh.com","commits":1,"url":"https://github.com/gang.peng"}]},"filePathRelative":"project/test/e2e.md"}');export{o as comp,u as data};
