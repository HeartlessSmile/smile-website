import{_ as n,c as a,a as e,o as t}from"./app-DzEwyuga.js";const p={};function l(c,s){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="版本控制" tabindex="-1"><a class="header-anchor" href="#版本控制"><span>版本控制</span></a></h1><p>前端开发中，最常用的版本控制工具是Git。Git是一种分布式版本控制系统，具有快速、高效、可靠、灵活等优点。它可以轻松地处理分支和合并，支持多种协作模式，包括个人开发、团队开发以及开源开发。</p><p>在前端开发中，Git可以用于管理代码库、网站内容、文档和资源文件等。许多前端框架和工具，如React、Vue、Angular等，也使用Git进行版本控制。</p><p>除了Git之外，还有一些其他版本控制工具可供选择，如SVN、Mercurial等。但是由于Git已成为前端开发社区的事实标准，因此我推荐前端开发人员使用Git进行版本控制。</p><h2 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令"><span>常用命令</span></a></h2><p>git 命令有很多，但我们工作中经常用到的并不多，以下是我们常用的一些命令:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> init <span class="token comment"># 初始化一个Git 项目目录</span></span>
<span class="line"><span class="token function">git</span> clone <span class="token operator">&lt;</span>url<span class="token operator">&gt;</span> <span class="token comment"># 克隆一个远程仓库到本地</span></span>
<span class="line"><span class="token function">git</span> status <span class="token comment">#查看变动的文件</span></span>
<span class="line"><span class="token function">git</span> log <span class="token comment">#查看提交历史</span></span>
<span class="line"><span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-A</span> <span class="token comment"># 将变动添加到暂存区</span></span>
<span class="line"><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;message&#39;</span> <span class="token comment">#提交变动</span></span>
<span class="line"><span class="token function">git</span> pull <span class="token comment">#拉取远程代码</span></span>
<span class="line"><span class="token function">git</span> push <span class="token comment">#推送代码到远端</span></span>
<span class="line"><span class="token function">git</span> branch <span class="token comment">#列出所有本地分支</span></span>
<span class="line"><span class="token function">git</span> branch <span class="token parameter variable">-r</span> <span class="token comment"># 列出所有远程分支</span></span>
<span class="line"><span class="token function">git</span> branch <span class="token parameter variable">-a</span> <span class="token comment"># 列出所有分支</span></span>
<span class="line"><span class="token function">git</span> merge develop <span class="token comment"># 将 develop 分支合并到当前分支</span></span>
<span class="line"><span class="token function">git</span> branch <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span> <span class="token comment"># 新建一个新分支 但仍在当前分支</span></span>
<span class="line"><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span> <span class="token comment"># 新建一个新分支并切换到该分支</span></span>
<span class="line"><span class="token function">git</span> checkout <span class="token operator">&lt;</span>branch-name<span class="token operator">&gt;</span> <span class="token comment"># 切换分支</span></span>
<span class="line"><span class="token function">git</span> branch <span class="token parameter variable">-m</span> <span class="token operator">&lt;</span>new-name<span class="token operator">&gt;</span> <span class="token comment"># 重命名当前分支</span></span>
<span class="line"><span class="token function">git</span> branch <span class="token parameter variable">-d</span> <span class="token operator">&lt;</span>branch-name<span class="token operator">&gt;</span> <span class="token comment"># 删除指定分支</span></span>
<span class="line"><span class="token function">git</span> <span class="token function">rm</span> <span class="token operator">&lt;</span>file-name<span class="token operator">&gt;</span> <span class="token comment"># 将文件从暂存区和工作区中删除</span></span>
<span class="line"><span class="token function">git</span> stash save <span class="token operator">&lt;</span>message<span class="token operator">&gt;</span> <span class="token comment">#将更改存储暂存</span></span>
<span class="line"><span class="token function">git</span> stash list <span class="token comment"># 查看暂存区</span></span>
<span class="line"><span class="token function">git</span> stash pop <span class="token operator">&lt;</span>stash@<span class="token punctuation">{</span>id<span class="token punctuation">}</span><span class="token operator">&gt;</span>  <span class="token comment"># 取回暂存区代码 执行后将对应的stash id 从stash list里删除</span></span>
<span class="line"><span class="token function">git</span> stash apply <span class="token operator">&lt;</span>stash@<span class="token punctuation">{</span>id<span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token comment"># 取回暂存区代码 stash id 继续保留</span></span>
<span class="line"><span class="token function">git</span> <span class="token function">diff</span> <span class="token operator">&lt;</span>branch-A<span class="token operator">&gt;</span><span class="token punctuation">..</span><span class="token operator">&lt;</span>branch-B<span class="token operator">&gt;</span> <span class="token comment"># 查看A中有而B没有的</span></span>
<span class="line"><span class="token function">git</span> rebase <span class="token operator">&lt;</span>branch-name<span class="token operator">&gt;</span> <span class="token comment"># 合并/删除提交</span></span>
<span class="line"><span class="token function">git</span> cherry-pick <span class="token operator">&lt;</span>commit<span class="token operator">&gt;</span> <span class="token comment"># 将指定的提交提取到当前分支</span></span>
<span class="line"><span class="token function">git</span> config <span class="token parameter variable">--list</span> <span class="token comment"># 显示当前Git配置</span></span>
<span class="line"><span class="token function">git</span> tag <span class="token operator">&lt;</span>tag<span class="token operator">&gt;</span> <span class="token comment"># 基于当前 commit 新建一个 tag</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="git规范" tabindex="-1"><a class="header-anchor" href="#git规范"><span>git规范</span></a></h2><p>具体规范已单独整理，请点击查看<a href="/guide/git/" target="_blank" rel="noopener noreferrer">git规范</a>，包含如下内容</p><ul><li>分支管理</li><li>commit提交规范</li><li>Git Flow规范</li></ul>`,10)]))}const i=n(p,[["render",l],["__file","version.html.vue"]]),r=JSON.parse('{"path":"/project/codeQuality/version.html","title":"版本控制","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"常用命令","slug":"常用命令","link":"#常用命令","children":[]},{"level":2,"title":"git规范","slug":"git规范","link":"#git规范","children":[]}],"git":{"updatedTime":1733483676000,"contributors":[{"name":"gang.peng","username":"gang.peng","email":"gang.peng@szyh.com","commits":1,"url":"https://github.com/gang.peng"}]},"filePathRelative":"project/codeQuality/version.md"}');export{i as comp,r as data};
