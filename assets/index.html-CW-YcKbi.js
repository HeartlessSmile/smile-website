import{_ as l,c as e,a as i,o as t}from"./app-DzEwyuga.js";const n={};function s(d,o){return t(),e("div",null,o[0]||(o[0]=[i('<h1 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h1><p>当我们学习一个编程语言时，不可避免地会涉及其数据类型和数据语言。数据在任何编程语言中都是至关重要的基础。</p><h2 id="node-js-数据类型" tabindex="-1"><a class="header-anchor" href="#node-js-数据类型"><span>Node.js 数据类型</span></a></h2><p>众所周知，在 <code>Node.js</code> 中的数据类型主要分为两种，<code>原始类型</code>（即基本数据类型）和<code>对象类型</code>（即引用数据类型）</p><ol><li><p><strong>基本数据类型</strong>:</p><ul><li><strong>字符串 (String)</strong>: 表示文本数据，用单引号 (&#39;&#39;) 或双引号 (&quot;&quot;) 包围。</li><li><strong>数字 (Number)</strong>: 表示数值，可以是整数或浮点数。</li><li><strong>布尔值 (Boolean)</strong>: 表示逻辑值，只有 true 和 false 两个取值。</li><li><strong>空值 (Null)</strong>: 表示无值。</li><li><strong>未定义 (Undefined)</strong>: 表示未定义的值。</li><li><strong>符号 (Symbol)</strong>: 表示唯一的标识符。</li></ul></li><li><p><strong>引用数据类型</strong>:</p><ul><li><strong>对象 (Object)</strong>: 表示复杂的数据结构，可以存储多个键值对。</li><li><strong>数组 (Array)</strong>: 是一种特殊的对象，用于按顺序存储多个值。</li><li><strong>函数 (Function)</strong>: 是一种特殊的对象，用于执行特定任务的代码块。</li></ul></li></ol><p>我们都知道 <code>Node.js</code> 是动态类型语言，变量可以根据需要在这些数据类型之间自由转换。</p><h2 id="rust-数据类型" tabindex="-1"><a class="header-anchor" href="#rust-数据类型"><span>Rust 数据类型</span></a></h2><p>相对于 <code>Node.js</code> 的数据类型，作为静态语言的 <code>Rust</code> 的数据类型更为复杂一些</p><ol><li><strong>标量数据类型</strong>: <ul><li><strong>整数类型</strong>： <ul><li><code>i8</code>, <code>i16</code>, <code>i32</code>, <code>i64</code>, <code>i128</code>: 有符号整数类型，分别表示 8、16、32、64、128 位。</li><li><code>u8</code>, <code>u16</code>, <code>u32</code>, <code>u64</code>, <code>u128</code>: 无符号整数类型，分别表示 8、16、32、64、128 位。</li><li><code>isize</code>, <code>usize</code>: 分别表示指针大小的有符号和无符号整数类型。</li></ul></li><li><strong>浮点数类型</strong>： <ul><li><code>f32</code>: 单精度浮点数。</li><li><code>f64</code>: 双精度浮点数。</li></ul></li><li><strong>布尔类型</strong>： <ul><li><code>bool</code>: 可以是 <code>true</code> 或 <code>false</code>。</li></ul></li><li><strong>字符类型</strong>： <ul><li><code>char</code>: 单个 Unicode 字符，存储为 4 个字节</li></ul></li><li><strong>单元类型</strong><ul><li>即 () ，其唯一的值也是 ()</li></ul></li></ul></li><li><strong>复合数据类型</strong><ul><li><strong>字符串类型</strong><ul><li>对，没错，就是你想的那个<code>String</code>，在 <code>Rust</code> 中<code>String</code> 类型是动态分配的、可变长度的 <code>UTF-8</code> 字符串类型。</li></ul></li><li><strong>元组类型</strong><ul><li>元组是由多种类型组合到一起形成的，元组的长度是固定的，元组中元素的顺序也是固定的。</li></ul></li><li><strong>数组类型</strong><ul><li>元组是将相同类型的数据按顺序组织在一起的，数组的长度是固定的，数组中元素的顺序也是固定的。</li></ul></li><li><strong>枚举类型</strong><ul><li>枚举类型是一个类型，它会包含所有可能的枚举成员, 而枚举值是该类型中的具体某个成员的实例。</li></ul></li><li><strong>结构体</strong><ul><li>由多种类型组合而成。但是与元组不同的是，结构体可以为内部的每个字段起一个富有含义的名称。因此结构体更加灵活更加强大，你无需依赖这些字段的顺序来访问和解析它们。</li></ul></li></ul></li></ol><p>作为静态语言，<code>Rust</code> 无法在这些数据类型之间自由转换，但也有属于自己的一套隐式转换和显示转换规则，在后续的章节中我们一起讨论。</p>',10)]))}const c=l(n,[["render",s],["__file","index.html.vue"]]),g=JSON.parse('{"path":"/rust/dataType/","title":"前言","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"Node.js 数据类型","slug":"node-js-数据类型","link":"#node-js-数据类型","children":[]},{"level":2,"title":"Rust 数据类型","slug":"rust-数据类型","link":"#rust-数据类型","children":[]}],"git":{"updatedTime":1733483676000,"contributors":[{"name":"gang.peng","username":"gang.peng","email":"gang.peng@szyh.com","commits":1,"url":"https://github.com/gang.peng"}]},"filePathRelative":"rust/dataType/index.md"}');export{c as comp,g as data};
