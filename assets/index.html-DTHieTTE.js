import{_ as a,c as e,a as n,o as t}from"./app-DzEwyuga.js";const p={};function i(l,s){return t(),e("div",null,s[0]||(s[0]=[n(`<h1 id="git-规范" tabindex="-1"><a class="header-anchor" href="#git-规范"><span>Git 规范</span></a></h1><h2 id="分支管理" tabindex="-1"><a class="header-anchor" href="#分支管理"><span>分支管理</span></a></h2><ul><li><p><strong>master</strong> 主分支：master主分支始终保持稳定的可发布版本</p><p>说明：只有项目组主程才拥有master主分支的管理权限（例如其他分支合并到master必须由主程操作）</p></li><li><p><strong>dev</strong> 开发主分支，为不稳定版本，可能存在功能缺失，但已有的功能必须是完整的</p><p>说明：原则上不允许直接在dev分支上进行功能开发，必须新建feature分支进行开发</p></li><li><p><strong>feature/[功能名称]</strong> 从dev分支创建，斜杠后跟功能名称，用于新功能开发，每天下班前push提交到远程</p><p>说明：开发完成以后，在远程发起向dev分支的合并请求，由指定的CodeReview人员审查通过以后进行合并，并删除该分支</p></li><li><p><strong>bugfix/[bug编号]</strong> 问题修复分支：从dev分支创建，用于修改测试提出的bug，斜杠后跟bug编号</p><p>说明：修复以后，在远程发起向dev分支的合并请求，并指定提交者自身（或其他人）作为CodeReview，合并以后删除该分支</p></li><li><p><strong>refactor/[重构名称]</strong> 重构分支：从dev分支创建，用于代码的重大规模重构（小规模重构创建feature分支即可）</p><p>说明：重构以后，必须经过严格测试通过，才能向dev分支合并。</p></li><li><p><strong>hotfix-[问题名称 | bug编号]</strong> 紧急热修复分支：从master分支创建，横线后面跟上问题名称或者对应的bug编号，仅仅适用于生产线问题紧急修复！</p><p>说明：修复完成，测试通过，合并到master和dev分支上，然后将此分支删除</p></li></ul><h2 id="commit提交" tabindex="-1"><a class="header-anchor" href="#commit提交"><span>Commit提交</span></a></h2><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>(<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>): <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>subject</span><span class="token punctuation">&gt;</span></span> #header</span>
<span class="line">// 空一行</span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">// 空一行</span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Header部分只有一行，包括三个字段：<code>type</code>（必需）、<code>scope</code>（可选）和<code>subject</code>（必需）。<code>&lt;body&gt;</code>和<code>&lt;footer&gt;</code>可省略</p><p>如： &quot;feat: 增加一个新功能&quot;</p><p>type用于说明 commit 的提交性质</p><p>| 值 | 描述 | | ---- | :--------------------: | --------- | | feat | 新增一个功能 | | fix | 修复一个Bug | | update | 更新某功能 | | docs | 文档变更 | | style | 代码格式（不影响功能，例如空格、分号等格式修正）| | refactor | 代码重构 | | perf | 改善性能 | | test | 测试 | | build | 变更项目构建或外部依赖（例如scopes: webpack、gulp、npm等）| | ci | 更改持续集成软件的配置文件和package中的scripts命令，例如scopes: Travis, Circle等 | | chore | 变更构建流程或辅助工具 | | revert | 代码回退 |</p>`,9)]))}const c=a(p,[["render",i],["__file","index.html.vue"]]),r=JSON.parse('{"path":"/guide/git/","title":"Git 规范","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"分支管理","slug":"分支管理","link":"#分支管理","children":[]},{"level":2,"title":"Commit提交","slug":"commit提交","link":"#commit提交","children":[]}],"git":{"updatedTime":1733483676000,"contributors":[{"name":"gang.peng","username":"gang.peng","email":"gang.peng@szyh.com","commits":1,"url":"https://github.com/gang.peng"}]},"filePathRelative":"guide/git/index.md"}');export{c as comp,r as data};
