import{_ as e,c as n,a,o as p}from"./app-DzEwyuga.js";const o={};function t(l,s){return p(),n("div",null,s[0]||(s[0]=[a(`<h1 id="package-json-字段解析" tabindex="-1"><a class="header-anchor" href="#package-json-字段解析"><span>package.json 字段解析</span></a></h1><h2 id="type" tabindex="-1"><a class="header-anchor" href="#type"><span>type</span></a></h2><p>在 <code>package.json</code> 文件中，<code>type</code> 属性用于指定模块的类型，即模块使用的模块系统。<code>type</code> 属性的值影响模块的导入和导出方式，以及模块的解析和加载行为。它告诉构建工具、打包工具或者运行时环境如何正确处理模块。</p><p>根据不同的值，<code>type</code> 属性可以有以下几种常见的取值：</p><ol><li><code>&quot;commonjs&quot;</code>：表示模块使用 CommonJS 模块系统。这是 Node.js 默认的模块系统，也是旧版的 JavaScript 模块系统。</li><li><code>&quot;module&quot;</code>：表示模块使用 ES 模块（ES Modules）系统。ES 模块是现代 JavaScript 的官方标准模块系统，它提供了更强大的模块化语法和功能。</li><li><code>&quot;umd&quot;</code>：表示模块既可以在浏览器端使用，也可以在 Node.js 环境中使用。这种类型的模块通常用于跨平台的通用模块，可以通过不同的模块系统进行加载。</li><li><code>&quot;module&quot; 和 &quot;main&quot;</code>：使用这种形式表示模块既可以使用 ES 模块系统，也可以使用 CommonJS 模块系统。这种类型的设置在同时兼容浏览器和 Node.js 的项目中很常见。</li></ol><p>请注意，<code>type</code> 属性在一些构建工具和平台中可能有特定的用途或扩展，具体的行为可能会有所不同。因此，在使用特定的构建工具或平台时，最好查阅相关文档以了解更多细节。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>不管type字段的值是多少, 以.mjs后缀名的文件总是被当作ES6模块，而以.cjs后缀名的文件总是被当成CommonJS模块，但不建议混用</p></div><h2 id="script" tabindex="-1"><a class="header-anchor" href="#script"><span>script</span></a></h2><p>npm 允许在 <code>package.json</code> 文件里面，使用 <code>scripts</code> 字段定义脚本命令, <code>scripts</code> 的每一个对象都对应一条脚本命令。</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line">  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node build.js&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述示例中，<code>build</code> 对应的脚本是 <code>node build.js</code>，表示在项目根目录执行 <code>npm run build</code> 时，就执行 <code>node build.js</code> 命令。</p><p>npm 脚本的原理非常简单。每当执行 <code>npm run</code>，就会自动新建一个 <code>Shell</code>，在这个 <code>Shell</code> 里面执行指定的脚本命令。因此，只要是 Shell（一般是 Bash）可以运行的命令，就可以写在 npm 脚本里面。</p><p>比较特别的是，<code>npm run</code>新建的这个 <code>Shell</code>，会将当前目录的<code>node_modules/.bin</code>子目录加入PATH变量，执行结束后，再将PATH变量恢复原样。</p><h3 id="默认值" tabindex="-1"><a class="header-anchor" href="#默认值"><span>默认值</span></a></h3><p>一般来说，npm 脚本由用户提供。但是，npm 对两个脚本提供了默认值。也就是说，这两个脚本不用定义，就可以直接使用。</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node server.js&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token property">&quot;install&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node-gyp rebuild&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>npm run start</code> 的默认值是 <code>node server.js</code>，前提是项目根目录下有 <code>server.js</code> 这个脚本； <code>npm run install</code> 的默认值是 <code>node-gyp rebuild</code> ，前提是项目根目录下有 <code>binding.gyp</code> 文件。</p><h3 id="钩子" tabindex="-1"><a class="header-anchor" href="#钩子"><span>钩子</span></a></h3><p>npm 脚本有 <code>pre</code> 和 <code>post</code> 两个钩子。举例来说，<code>build</code> 脚本命令的钩子就是 <code>prebuild</code> 和 <code>postbuild</code> 。</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token property">&quot;prebuild&quot;</span><span class="token operator">:</span> <span class="token string">&quot;echo I run before the build script&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cross-env NODE_ENV=production webpack&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token property">&quot;postbuild&quot;</span><span class="token operator">:</span> <span class="token string">&quot;echo I run after the build script&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户执行 <code>npm run build</code> 的时候，会自动按照下面的顺序执行。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">npm</span> run prebuild <span class="token operator">&amp;&amp;</span> <span class="token function">npm</span> run build <span class="token operator">&amp;&amp;</span> <span class="token function">npm</span> run postbuild</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>因此，可以在这两个钩子里面，完成一些准备工作和清理工作。下面是一个例子。</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token property">&quot;clean&quot;</span><span class="token operator">:</span> <span class="token string">&quot;rimraf ./dist &amp;&amp; mkdir dist&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token property">&quot;prebuild&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npm run clean&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cross-env NODE_ENV=production webpack&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>npm 默认提供下面这些钩子。</p><ul><li>prepublish，postpublish</li><li>preinstall，postinstall</li><li>preuninstall，postuninstall</li><li>preversion，postversion</li><li>pretest，posttest</li><li>prestop，poststop</li><li>prestart，poststart</li><li>prerestart，postrestart</li></ul><p>自定义的脚本命令也可以加上 <code>pre</code> 和<code>post</code>钩子。比如，<code>myscript</code>这个脚本命令，也有<code>premyscript</code>和<code>postmyscript</code>钩子。不过，双重的<code>pre</code>和<code>post</code>无效，比如<code>prepretest</code>和<code>postposttest</code>是无效的。</p><p>更多有关 scripts 命令，可参考<a href="https://www.ruanyifeng.com/blog/2016/10/npm_scripts.html" target="_blank" rel="noopener noreferrer">阮一峰的npm scripts 使用指南</a></p>`,28)]))}const c=e(o,[["render",t],["__file","package.html.vue"]]),d=JSON.parse('{"path":"/project/build/package.html","title":"package.json 字段解析","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"type","slug":"type","link":"#type","children":[]},{"level":2,"title":"script","slug":"script","link":"#script","children":[{"level":3,"title":"默认值","slug":"默认值","link":"#默认值","children":[]},{"level":3,"title":"钩子","slug":"钩子","link":"#钩子","children":[]}]}],"git":{"updatedTime":1733483676000,"contributors":[{"name":"gang.peng","username":"gang.peng","email":"gang.peng@szyh.com","commits":1,"url":"https://github.com/gang.peng"}]},"filePathRelative":"project/build/package.md"}');export{c as comp,d as data};
