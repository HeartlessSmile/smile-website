import{_ as i,c as o,b as n,d as a,e as p,f as l,a as t,r as c,o as r}from"./app-DzEwyuga.js";const u="/smile-website/images/monitor/hotout.png",d={};function k(v,s){const e=c("RouteLink");return r(),o("div",null,[s[25]||(s[25]=n("h1",{id:"基础搭建",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#基础搭建"},[n("span",null,"基础搭建")])],-1)),n("p",null,[s[1]||(s[1]=a("基于此前 我们分析的监控系统的")),p(e,{to:"/monitor/framework-sdk.html"},{default:l(()=>s[0]||(s[0]=[a("SDK架构")])),_:1}),s[2]||(s[2]=a(" ，我们决定采用")),s[3]||(s[3]=n("code",null,"Lerna",-1)),s[4]||(s[4]=a("作为管理多包工具，")),s[5]||(s[5]=n("code",null,"Rollup",-1)),s[6]||(s[6]=a("作为构建工具，当然，其他常用的基础配置也是少不了的 ")),s[7]||(s[7]=n("code",null,"TypeScript",-1)),s[8]||(s[8]=a(" + ")),s[9]||(s[9]=n("code",null,"ESLint",-1)),s[10]||(s[10]=a(" + ")),s[11]||(s[11]=n("code",null,"Husky",-1)),s[12]||(s[12]=a(" + ")),s[13]||(s[13]=n("code",null,"ESModule",-1)),s[14]||(s[14]=a("等"))]),s[26]||(s[26]=t(`<h2 id="lerna" tabindex="-1"><a class="header-anchor" href="#lerna"><span>Lerna</span></a></h2><p><a href="https://www.lernajs.cn/" target="_blank" rel="noopener noreferrer">Lerna</a> 是一个管理工具，用于管理包含多个软件包（package）的 JavaScript 项目。</p><h3 id="初始化项目" tabindex="-1"><a class="header-anchor" href="#初始化项目"><span>初始化项目</span></a></h3><p>建议将Lerna 安装到全局环境中</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> lerna</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我这里安装完后，lerna版本是V6.6.2，接下来我们使用lerna进行初始化项目</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">mkdir</span> beaconify <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> beaconify</span>
<span class="line">lerna init</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>你的目录结构应该是如下结构：</p><div class="language-txt line-numbers-mode" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">- beaconify/</span>
<span class="line">  - packages/</span>
<span class="line">  - package.json</span>
<span class="line">  - lerna.json</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>packages</code> 是 存放子包的目录，由 package.json 中的 workspaces 字段指定路径，也可以在<code>lerna.json</code> 中指定，默认为 packages</p></li><li><p><code>lerna.json</code> 是 lerna 项目的配置文件，它包含了多个子包的配置信息。</p><ul><li><code>$schema</code>：SON Schema 的一个关键字，用于指定当前 JSON 文件的架构（schema）文件。</li><li><code>packages</code>：指定存放子包的目录，默认为 packages。</li><li><code>version</code>：指定版本号的格式，默认为 independent，表示每个子包可以有独立的版本号。当设为 fixed 时，所有子包的版本号都必须一致。</li><li><code>npmClient</code>：指定使用的 npm 客户端，默认为 npm。</li><li><code>command</code>：指定执行命令的方式，默认为 run，表示使用 npm script 的方式来执行命令。</li><li><code>useWorkspaces</code>：指定是否启用 yarn workspaces 特性，默认为 false。如果设置为 true，则不需要再使用 lerna bootstrap 安装依赖，而是直接使用 yarn install 安装即可。</li><li><code>npmClientArgs</code>：指定传递给 npm 客户端的额外参数。</li><li><code>ignore</code>：指定忽略的文件或目录，支持 glob 匹配。</li></ul></li></ul><h3 id="添加子包" tabindex="-1"><a class="header-anchor" href="#添加子包"><span>添加子包</span></a></h3><p>为方便后续环境的搭建，我们这里先新建两个子包 <code>core</code> 和 <code>utils</code>，以 <code>core</code>包为例，先执行命令</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">lerna create core</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>会出现提示让你填写一些资料，我们可以一路回车创建完毕后，手动在子包的 <code>package.json</code>中更改，也可以在创建过程中填写</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 填写包名</span></span>
<span class="line">package name: <span class="token punctuation">(</span>core<span class="token punctuation">)</span> @beaconify/core </span>
<span class="line"><span class="token comment"># 版本号</span></span>
<span class="line">version: <span class="token punctuation">(</span><span class="token number">0.0</span>.0<span class="token punctuation">)</span> <span class="token number">0.0</span>.1</span>
<span class="line"><span class="token comment"># 描述</span></span>
<span class="line">description: </span>
<span class="line"><span class="token comment"># 关键词 </span></span>
<span class="line">keywords: </span>
<span class="line"><span class="token comment"># 主页</span></span>
<span class="line">homepage: </span>
<span class="line"><span class="token comment"># 开源协议</span></span>
<span class="line">license: <span class="token punctuation">(</span>ISC<span class="token punctuation">)</span> MIT</span>
<span class="line"><span class="token comment"># 入口文件</span></span>
<span class="line">entry point: <span class="token punctuation">(</span>lib/index.js<span class="token punctuation">)</span> </span>
<span class="line"><span class="token comment"># 绑定的git仓库</span></span>
<span class="line"><span class="token function">git</span> repository: <span class="token punctuation">(</span>https://github.com/CrayonPig/beaconify.git<span class="token punctuation">)</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建完毕后，目录结构如下</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">- packages</span>
<span class="line">  - core</span>
<span class="line">    - __tests__ <span class="token comment"># 测试用例</span></span>
<span class="line">      - core.test.js</span>
<span class="line">    - lib <span class="token comment"># 代码目录</span></span>
<span class="line">      - core.js <span class="token comment"># 入口</span></span>
<span class="line">    - package.json</span>
<span class="line">    - README.md</span>
<span class="line">- lerna.json</span>
<span class="line">- package.json</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样的，我们创建<code>utils</code> 子包，并lib下的文件都对应<code>package.json</code> 中的 <code>main</code> 入口文件字段的内容，将文件名重命名为index.js</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">- packages</span>
<span class="line">  - core</span>
<span class="line">    - __tests__ <span class="token comment"># 测试用例</span></span>
<span class="line">      - core.test.js</span>
<span class="line">    - lib <span class="token comment"># 代码目录</span></span>
<span class="line">      - index.js <span class="token comment"># 入口</span></span>
<span class="line">    - package.json</span>
<span class="line">    - README.md</span>
<span class="line">  - utils</span>
<span class="line">    - __tests__ <span class="token comment"># 测试用例</span></span>
<span class="line">      - utils.test.js</span>
<span class="line">    - lib <span class="token comment"># 代码目录</span></span>
<span class="line">      - index.js <span class="token comment"># 入口</span></span>
<span class="line">    - package.json</span>
<span class="line">    - README.md</span>
<span class="line">- lerna.json</span>
<span class="line">- package.json</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="子包调用" tabindex="-1"><a class="header-anchor" href="#子包调用"><span>子包调用</span></a></h3><p>我们接下来使用 <code>core</code> 调用 <code>utils</code>的方法，首先在根目录下为 <code>core</code>安装依赖</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">lerna <span class="token function">add</span> @beaconify/utils <span class="token parameter variable">--scope</span><span class="token operator">=</span>@beaconify/core</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>表示为 @beaconify/core 的子包中安装 @beaconify/utils 包作为运行时依赖项。</p><p>安装成功后，在根目录中会出现 node_modules ， 里面有 @beaconify/utils 包</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>当你在一个子包中安装依赖时，Lerna 会自动将该依赖项添加到根目录下的 package.json 文件中，并将该依赖项安装到根目录下的 node_modules 目录中。同时，Lerna 还会在当前子包中创建一个名为 node_modules 的符号链接，指向根目录下的 node_modules 目录。</p></div><p>将 <code>core/lib/index.js</code> 修改为如下内容</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> utils <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@beaconify/utils&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">core</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">utils</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello from core&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">core</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> core<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将 <code>utils/lib/index.js</code> 修改为如下内容</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">utils</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello from utils&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> utils<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后通过node执行 <code>core/lib/index.js</code>，成功打印两个日志后，代表引用成功</p><h3 id="后续安装依赖" tabindex="-1"><a class="header-anchor" href="#后续安装依赖"><span>后续安装依赖</span></a></h3><p>通过上述调用后，我们可以正常使用依赖，但后续重新安装依赖或者其他成员使用时，应该需要更简单的方法使用，所以我们要在 <code>package.json</code> 加一个新的命令</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;postinstall&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lerna link&quot;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>postinstall 是自带的钩子函数，表示在 <code>npm install</code> 执行完成后自动调用， <code>lerna link</code> 表示将仓库中互相引用的依赖连接起来</p><p>有关更多的<code>script</code> 字段，可参考<a href="../../project/build/package#script">script解析</a></p><h2 id="rollup" tabindex="-1"><a class="header-anchor" href="#rollup"><span>Rollup</span></a></h2><p><a href="https://www.rollupjs.com/" target="_blank" rel="noopener noreferrer">Rollup</a>是一个 JavaScript 模块打包工具，可以将多个小的代码片段编译为完整的库和应用。常见的如<code>Vue.js</code>和<code>React.js</code>均是由 Rollup 打包构建的。</p><h3 id="使用esmodule" tabindex="-1"><a class="header-anchor" href="#使用esmodule"><span>使用ESModule</span></a></h3><p>使用 ESModule 可以提供更好的模块化支持、静态代码分析、明确的依赖管理、命名空间隔离、动态导入和类型检查等优势。这些好处有助于提高代码的可读性、可维护性和性能，并提供更好的开发体验。除此之外，<code>Rollup</code>本身支持 ESModule，并且支持<a href="https://www.rollupjs.com/#tree-shaking" target="_blank" rel="noopener noreferrer"><code>Tree-Shaking</code></a>，可以对代码进行静态分析，将实际未使用用到的代码剔除。</p>`,39)),n("ol",null,[n("li",null,[s[16]||(s[16]=a("将根目录的 package.json 文件的 type 属性改为 ")),p(e,{to:"/monitor/utils/package.html#type"},{default:l(()=>s[15]||(s[15]=[a("module")])),_:1})]),s[17]||(s[17]=n("li",null,"将 core 和 utils 包内容改为 ESModule 形式",-1))]),s[27]||(s[27]=t(`<h3 id="添加执行脚本" tabindex="-1"><a class="header-anchor" href="#添加执行脚本"><span>添加执行脚本</span></a></h3><ol><li>在项目中安装 Rollup, 我这里版本号是 <code>3.21.7</code></li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">npm</span> <span class="token function">install</span> rollup --save-dev</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li>根目录创建 scripts 文件夹，并创建 <code>rollup.dev.js</code> 文件</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&#39;packages/core/lib/index.js&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 入口文件</span></span>
<span class="line">    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token string">&#39;./dist/bundle.js&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 出口文件</span></span>
<span class="line">      <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&#39;iife&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 生成文件格式，为方便调试暂时先写 iife，意为输出后bundle为自执行函数，适用于 &lt;script&gt; 标签</span></span>
<span class="line">      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;beaconify&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 全局变量名</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>根目录 package.json 添加一个 dev 命令， <code>-c, --config</code> 命令是制定配置文件，如果没有指定，则默认根目录 <code>rollup.config.js</code></li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token string-property property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token string-property property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;rollup --config ./scripts/rollup.dev.js&quot;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们执行 <code>npm run dev</code> 命令，可以发现，在根目录下的dist中的确生成 <code>bundle.js</code> 文件，内容如下</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> utils <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@beaconify/utils&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">core</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">utils</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello from core&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token punctuation">{</span> core <span class="token keyword">as</span> <span class="token keyword">default</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>跟我们想象的不太一样， <code>@beaconify/utils</code> 包内的内容并没有被导出，只是做了一个引用。这是因为 <code>Rollup</code> 默认只会对 node_modules 目录中的文件做引用，如果需要导出，要使用额外插件 <a href="https://www.npmjs.com/package/@rollup/plugin-node-resolve" target="_blank" rel="noopener noreferrer"><code>@rollup/plugin-node-resolve</code></a>，至于<a href="https://www.rollupjs.com/guide/faqs#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E5%B0%86-node-resolve-%E4%BD%9C%E4%B8%BA%E5%86%85%E7%BD%AE%E5%8A%9F%E8%83%BD" target="_blank" rel="noopener noreferrer">为什么不将 node-resolve 作为内置功能？</a></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">npm</span> <span class="token function">install</span> @rollup/plugin-node-resolve --save-dev</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>修改 <code>rollup.dev.js</code> 文件</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> resolve <span class="token keyword">from</span> <span class="token string">&#39;@rollup/plugin-node-resolve&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">input</span><span class="token operator">:</span><span class="token string">&#39;packages/core/lib/index.js&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 入口</span></span>
<span class="line">  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">file</span><span class="token operator">:</span><span class="token string">&#39;./dist/bundle.js&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 出口</span></span>
<span class="line">    <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&#39;iife&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;beaconify&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次执行 <code>npm run dev</code> 命令，看到输出文件变成了</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">utils</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello from utils&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">core</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">utils</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello from core&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token punctuation">{</span> core <span class="token keyword">as</span> <span class="token keyword">default</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然我们已经定好标准使用 ESModule ，但我们无法保证项目中使用的所有的第三方库都是 ESModule，为了支持 Commonjs，需安装插件<code>@rollup/plugin-commonjs</code></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">npm</span> <span class="token function">install</span> @rollup/plugin-commonjs --save-dev</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在 <code>rollup.dev.js</code> 中添加</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> resolve <span class="token keyword">from</span> <span class="token string">&#39;@rollup/plugin-node-resolve&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> commonjs <span class="token keyword">from</span> <span class="token string">&#39;@rollup/plugin-commonjs&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&#39;packages/core/lib/index.js&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 入口</span></span>
<span class="line">  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token string">&#39;./dist/bundle.js&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 出口</span></span>
<span class="line">    <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&#39;iife&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;beaconify&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">commonjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="热更新" tabindex="-1"><a class="header-anchor" href="#热更新"><span>热更新</span></a></h3><p>为了提高效率，在开发的时候，我们希望 rollup能自动监听文件的改动，并且因为我们 SDK 场景是用于浏览器，所以我们希望能像 webpack 一样，打开页面供我们调试。</p><p>针对监听文件的改动，Rollup 为我们提供了命令 <code>-w/--watch</code>, 表示监听 bundle 中的文件并在文件改变时重新构建</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token string-property property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token string-property property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;rollup -w --config ./scripts/rollup.dev.js&quot;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打开页面调试，我们需要借助 <code>rollup-plugin-serve</code> 和 <code>rollup-plugin-livereload</code>, 这两个插件常常一起使用，<code>rollup-plugin-serve</code> 用于启动一个服务器，<code>rollup-plugin-livereload</code> 用于文件变化时，实时刷新页面</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">npm</span> <span class="token function">install</span> rollup-plugin-serve --save-dev</span>
<span class="line"><span class="token function">npm</span> <span class="token function">install</span> rollup-plugin-livereload --save-dev</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>修改 <code>rollup.dev.js</code> 文件</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> resolve <span class="token keyword">from</span> <span class="token string">&#39;@rollup/plugin-node-resolve&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> commonjs <span class="token keyword">from</span> <span class="token string">&#39;@rollup/plugin-commonjs&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> serve <span class="token keyword">from</span> <span class="token string">&#39;rollup-plugin-serve&#39;</span></span>
<span class="line"><span class="token keyword">import</span> livereload <span class="token keyword">from</span> <span class="token string">&#39;rollup-plugin-livereload&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&#39;packages/core/lib/index.js&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 入口</span></span>
<span class="line">  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token string">&#39;./dist/bundle.js&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 出口</span></span>
<span class="line">    <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&#39;iife&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;beaconify&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">commonjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">serve</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">open</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">contentBase</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;example&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">//服务器启动的文件夹，默认是项目根目录，需要在该文件下创建index.html</span></span>
<span class="line">      <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8020</span>   <span class="token comment">//端口号，默认10001</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    </span>
<span class="line">    <span class="token function">livereload</span><span class="token punctuation">(</span><span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span>   <span class="token comment">//watch dist目录，当目录中的文件发生变化时，刷新页面</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时 根目录创建<code>example</code>文件夹，并添加<code>index.html</code></p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./bundle.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  </span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">  <span class="token function">beaconify</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后执行 <code>npm run dev</code> 命令，可以发现可以自动打开浏览器，并且 控制台已经有输出</p><p><img src="`+u+`" alt="控制台输出"></p><p>我们手动更改 <code>core</code> 或 <code>utils</code> 的内容后，控制台的输出也会随之改变</p><h2 id="typescript" tabindex="-1"><a class="header-anchor" href="#typescript"><span>TypeScript</span></a></h2><p>为了提高代码维护性和可读性，我们将引入 <code>TypeScript</code>，此项功能依赖 <code>typescirpt</code>、<code>tslib</code>、<code>rollup-plugin-typescript2</code></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">npm</span> <span class="token function">install</span> rollup-plugin-typescript2 typescript tslib --save-dev</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>rollup.dev.js</code> 文件中，添加ts相关内容</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> resolve <span class="token keyword">from</span> <span class="token string">&#39;@rollup/plugin-node-resolve&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> commonjs <span class="token keyword">from</span> <span class="token string">&#39;@rollup/plugin-commonjs&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> serve <span class="token keyword">from</span> <span class="token string">&#39;rollup-plugin-serve&#39;</span></span>
<span class="line"><span class="token keyword">import</span> livereload <span class="token keyword">from</span> <span class="token string">&#39;rollup-plugin-livereload&#39;</span></span>
<span class="line"><span class="token keyword">import</span> typescript <span class="token keyword">from</span> <span class="token string">&#39;rollup-plugin-typescript2&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> extensions <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token string">&#39;.js&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string">&#39;.ts&#39;</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&#39;packages/core/lib/index.ts&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 入口</span></span>
<span class="line">  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token string">&#39;./dist/bundle.js&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 出口</span></span>
<span class="line">    <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&#39;iife&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;beaconify&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  extensions<span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token function">resolve</span><span class="token punctuation">(</span>extensions<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">commonjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">serve</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">open</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">contentBase</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;example&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">//服务器启动的文件夹，默认是项目根目录，需要在该文件下创建index.html</span></span>
<span class="line">      <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8020</span>   <span class="token comment">//端口号，默认10001</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    </span>
<span class="line">    <span class="token function">livereload</span><span class="token punctuation">(</span><span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token comment">//watch dist目录，当目录中的文件发生变化时，刷新页面</span></span>
<span class="line">    <span class="token function">typescript</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      extensions</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>extensions</code> 是用于配置解析模块文件的扩展名的选项。通过指定 extensions，你可以告诉 Rollup 在解析模块时考虑哪些文件扩展名。</p>`,38)),n("p",null,[s[19]||(s[19]=a("然后将 core 和 utils 包内容改为 ts 形式，在项目根目录添加 ")),s[20]||(s[20]=n("code",null,"tsconfig.json",-1)),s[21]||(s[21]=a("，该文件具体配置字段描述参见")),p(e,{to:"/project/codeQuality/tsconfig.html"},{default:l(()=>s[18]||(s[18]=[a("tsconfig.json字段")])),_:1})]),s[28]||(s[28]=t(`<div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ESNext&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 目标语言的版本</span></span>
<span class="line">    <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ESNext&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 生成代码的模板标准</span></span>
<span class="line">    <span class="token property">&quot;importHelpers&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">// 通过tslib引入helper函数，文件必须是模块</span></span>
<span class="line">    <span class="token property">&quot;moduleResolution&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node16&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 模块解析策略，ts默认用node的解析策略，即相对的方式导入</span></span>
<span class="line">    <span class="token property">&quot;skipLibCheck&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 跳过对声明文件的类型检查</span></span>
<span class="line">    <span class="token property">&quot;esModuleInterop&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 允许export=导出，由import from 导入</span></span>
<span class="line">    <span class="token property">&quot;resolveJsonModule&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否允许直接导入 JSON 文件作为模块。</span></span>
<span class="line">    <span class="token property">&quot;allowSyntheticDefaultImports&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 允许在导入模块时使用合成的默认导入。</span></span>
<span class="line">    <span class="token property">&quot;sourceMap&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 生成目标文件的sourceMap文件</span></span>
<span class="line">    <span class="token property">&quot;outDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dist&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 指定输出目录</span></span>
<span class="line">    <span class="token property">&quot;baseUrl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 解析非相对模块的基地址，默认是当前目录</span></span>
<span class="line">    <span class="token property">&quot;lib&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;esnext&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;DOM&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// TS需要引用的库，即声明文件，es5 默认引用dom、es5、scripthost,如需要使用es的高级版本特性，通常都需要配置，如es8的数组新特性需要引入&quot;ES2019.Array&quot;,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// 指定一个匹配列表，支持 glob 通配符（属于自动指定该路径下的所有ts相关文件）</span></span>
<span class="line">  <span class="token property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string">&quot;packages/**/*.ts&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;packages/**/*.d.ts&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// 指定一个排除列表，支持 glob 通配符（include的反向操作）</span></span>
<span class="line">  <span class="token property">&quot;exclude&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;node_modules&quot;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上步骤完成后，我们查看 <code>core</code> 对 <code>utils</code> 包的引用，会发现ts报错</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">找不到模块“@beaconify<span class="token operator">/</span><span class="token function">utils”或其相应的类型声明。ts</span><span class="token punctuation">(</span><span class="token number">2307</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这是因为ts将<code>@beaconify/utils</code>视为第三方模块，而不是本地资源文件。会去查找他的.d.ts文件，但我们并没有这个文件。解决也很简单，在<code>tsconfig.json</code> 加相关的路径引用</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 配置模块解析时的路径映射</span></span>
<span class="line">    <span class="token property">&quot;paths&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;@beaconify/utils&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token string">&quot;./packages/utils/lib&quot;</span></span>
<span class="line">      <span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时再去看，ts已经正常运行在我们项目中了</p><h2 id="eslint" tabindex="-1"><a class="header-anchor" href="#eslint"><span>ESLint</span></a></h2><p><code>ESLint</code> 是一个基于代码风格的代码检查工具，可以检查不规范的代码。</p><p>我们首先安装 <code>ESLint</code> 本体 、 rollup 检测插件 <code>@rollup/plugin-eslint</code> 以及我们自己的Eslint规则 <code>eslint-plugin-guide</code></p>`,9)),n("p",null,[s[23]||(s[23]=n("code",null,"eslint-plugin-guide",-1)),s[24]||(s[24]=a(" 的规则可参见")),p(e,{to:"/guide/"},{default:l(()=>s[22]||(s[22]=[a("eslint-plugin-guide")])),_:1})]),s[29]||(s[29]=t(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">npm</span> <span class="token function">install</span> eslint @rollup/plugin-eslint eslint-plugin-guide --save-dev</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>不要使用 <code>rollup-plugin-eslint</code> 插件，该插件不支持一些<code>ESLint</code> 规则，会报错</p></div><p>然后根目录新建 <code>.eslintrc</code> 文件</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;root&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;env&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;node&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;globals&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;NodeJS&quot;</span><span class="token operator">:</span> <span class="token string">&quot;readonly&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;Window&quot;</span><span class="token operator">:</span> <span class="token string">&quot;readonly&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string">&quot;guide&quot;</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;extends&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string">&quot;plugin:guide/base&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;plugin:guide/typeScript&quot;</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;rules&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">为什么不使用 <code>.eslintrc.js</code> 文件？</p><p><code>ESLint</code> 在处理配置文件时，默认将其视为 <code>CommonJS</code> 模块。但是，当配置文件所在的目录的最近的 <code>package.json</code> 文件中包含 <code>&quot;type&quot;: &quot;module&quot;</code> <code>的声明时，ESLint</code> 将其视为 <code>ES</code> 模块文件。就会产生冲突。</p></div><p>此时我们通过编辑器查看代码，已经有了报错提醒，但是我们使用rollup的时候还没有报错，所以继续配置 <code>rollup.dev.js</code></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> eslint <span class="token keyword">from</span> <span class="token string">&#39;@rollup/plugin-eslint&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line">  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token function">eslint</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">include</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;packages/**/*.ts&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">throwOnError</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 有报错则中止进程</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重新运行，就可以看到报错提醒了</p><h2 id="babel" tabindex="-1"><a class="header-anchor" href="#babel"><span>Babel</span></a></h2><p>由于是监控类SDK项目，对代码体积有一定的要求，所以暂时先不用 <code>Babel</code>，减少不必要的polyfill，尤其是公司项目都是vue、react的情况下，不需要兼容低版本浏览器，如果后续确实有需求，我们可以单开一个polyfill插件做兼容。</p>`,10))])}const b=i(d,[["render",k],["__file","basics.html.vue"]]),g=JSON.parse('{"path":"/monitor/sdk/basics.html","title":"基础搭建","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"Lerna","slug":"lerna","link":"#lerna","children":[{"level":3,"title":"初始化项目","slug":"初始化项目","link":"#初始化项目","children":[]},{"level":3,"title":"添加子包","slug":"添加子包","link":"#添加子包","children":[]},{"level":3,"title":"子包调用","slug":"子包调用","link":"#子包调用","children":[]},{"level":3,"title":"后续安装依赖","slug":"后续安装依赖","link":"#后续安装依赖","children":[]}]},{"level":2,"title":"Rollup","slug":"rollup","link":"#rollup","children":[{"level":3,"title":"使用ESModule","slug":"使用esmodule","link":"#使用esmodule","children":[]},{"level":3,"title":"添加执行脚本","slug":"添加执行脚本","link":"#添加执行脚本","children":[]},{"level":3,"title":"热更新","slug":"热更新","link":"#热更新","children":[]}]},{"level":2,"title":"TypeScript","slug":"typescript","link":"#typescript","children":[]},{"level":2,"title":"ESLint","slug":"eslint","link":"#eslint","children":[]},{"level":2,"title":"Babel","slug":"babel","link":"#babel","children":[]}],"git":{"updatedTime":1733483676000,"contributors":[{"name":"gang.peng","username":"gang.peng","email":"gang.peng@szyh.com","commits":1,"url":"https://github.com/gang.peng"}]},"filePathRelative":"monitor/sdk/basics.md"}');export{b as comp,g as data};
